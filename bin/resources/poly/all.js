
(function(/*! Stitch !*/) {
  if (!this.require) {
    var modules = {}, cache = {}, require = function(name, root) {
      var path = expand(root, name), module = cache[path], fn;
      if (module) {
        return module.exports;
      } else if (fn = modules[path] || modules[path = expand(path, './index')]) {
        module = {id: path, exports: {}};
        try {
          cache[path] = module;
          fn(module.exports, function(name) {
            return require(name, dirname(path));
          }, module);
          return module.exports;
        } catch (err) {
          delete cache[path];
          throw err;
        }
      } else {
        throw 'module \'' + name + '\' not found';
      }
    }, expand = function(root, name) {
      var results = [], parts, part;
      if (/^\.\.?(\/|$)/.test(name)) {
        parts = [root, name].join('/').split('/');
      } else {
        parts = name.split('/');
      }
      for (var i = 0, length = parts.length; i < length; i++) {
        part = parts[i];
        if (part == '..') {
          results.pop();
        } else if (part != '.' && part != '') {
          results.push(part);
        }
      }
      return results.join('/');
    }, dirname = function(path) {
      return path.split('/').slice(0, -1).join('/');
    };
    this.require = function(name) {
      return require(name, '');
    }
    this.require.define = function(bundle) {
      for (var key in bundle)
        modules[key] = bundle[key];
    };
  }
  return this.require.define;
}).call(this)({"analytics": function(exports, require, module) {// Segment.io snippet
// From https://segment.io/polychart/setup/javascript/snippet
var analytics=analytics||[];analytics.load=function(e){var t=document.createElement("script");t.type="text/javascript",t.async=!0,t.src=("https:"===document.location.protocol?"https://":"http://")+"d2dq2ahtl5zl1z.cloudfront.net/analytics.js/v1/"+e+"/analytics.js";var n=document.getElementsByTagName("script")[0];n.parentNode.insertBefore(t,n);var r=function(e){return function(){analytics.push([e].concat(Array.prototype.slice.call(arguments,0)))}},i=["identify","track","trackLink","trackForm","trackClick","trackSubmit","pageview","ab","alias","ready","group"];for(var s=0;s<i.length;s++)analytics[i[s]]=r(i[s])};
analytics.load("y8g2hfz05d");

// Need this since analytics.js expects it and stitch wraps by default
window.analytics = analytics;

// track referrer when possible
if(window.document.referrer)
  analytics.track("dbb__referral", {
    referurl: window.document.referrer,
    referhost: window.document.referrer.split("/")[2]
  });
}, "events": function(exports, require, module) {// Generated by CoffeeScript 1.6.2
(function() {
  var Events, defaultListeners, eventTree, strify, t;

  require('analytics');

  eventTree = {
    ui: {
      dropdown: {
        show: {},
        shown: {
          untracked: true
        },
        hide: {},
        hidden: {
          untracked: true
        },
        choose: {},
        disable: {
          untracked: true
        },
        enable: {
          untracked: true
        }
      },
      chart: {
        render: {
          untracked: true
        },
        add: {},
        remove: {},
        edit: {}
      },
      quickadd: {
        add: {},
        click: {},
        expand: {},
        collapse: {}
      },
      layer: {
        remove: {}
      },
      metric: {
        remove: {}
      },
      filter: {
        remove: {}
      },
      highlight: {
        begin: {
          untracked: true
        },
        end: {
          untracked: true
        },
        click: {}
      },
      backtodbb: {
        click: {}
      },
      dnd: {
        start: {},
        drop: {},
        reject: {},
        targetselect: {},
        bazinga: {}
      },
      table: {
        focus: {
          untracked: true
        },
        open: {}
      }
    },
    nav: {
      home: {
        open: {}
      },
      chartbuilder: {
        open: {}
      },
      dashbuilder: {
        open: {}
      },
      sharepanel: {
        open: {},
        close: {}
      }
    },
    model: {
      dashboarditem: {
        create: {},
        update: {},
        "delete": {}
      }
    },
    error: {
      polyjs: {
        data: {}
      }
    },
    share: {
      email: {
        click: {}
      },
      copyurl: {
        click: {}
      },
      copyimage: {
        click: {}
      }
    },
    "export": {
      pdf: {
        click: {}
      },
      png: {
        click: {}
      },
      svg: {
        click: {}
      },
      ppt: {
        click: {}
      }
    }
  };

  defaultListeners = {};

  strify = JSON.stringify;

  Events = {
    debug: function(str) {
      if (window.polydebug) {
        return console.debug(str);
      }
    },
    identify: function(e, t, n, r) {
      var err;

      try {
        this.debug("analytics.identify(" + (strify(e)) + ", " + (strify(t)) + ", " + (strify(n)) + ", " + (strify(r)) + ")");
      } catch (_error) {
        err = _error;
        this.debug("analytics.track(\"" + e + "\", \"" + t + "\", \"" + n + "\", \"" + r + "\")");
        this.debug("While attempting to stringify previous: " + err);
        window.errObj = {
          e: e,
          t: t,
          n: n,
          r: r
        };
      }
      if (window.analytics != null) {
        return window.analytics.identify(e, t, n, r);
      } else {
        return console.warn('analytics.js not present!');
      }
    },
    track: function(e, t, n, r) {
      var err;

      try {
        this.debug("analytics.track(" + (strify(e)) + ", " + (strify(t)) + ", " + (strify(n)) + ", " + (strify(r)) + ")");
      } catch (_error) {
        err = _error;
        this.debug("analytics.track(\"" + e + "\", \"" + t + "\", \"" + n + "\", \"" + r + "\")");
        this.debug("While attempting to stringify previous: " + err);
        window.errObj = {
          e: e,
          t: t,
          n: n,
          r: r
        };
      }
      if (window.analytics != null) {
        return window.analytics.track(e, t, n, r);
      } else {
        return console.warn('analytics.js not present!');
      }
    },
    invalidateCurrentListeners: function() {
      var c;

      c = $({});
      _.each(defaultListeners, function(listener, evt) {
        return c.on(evt, listener);
      });
      return this.center = c;
    },
    on: function(evt, sel, dat, fn) {
      var err;

      try {
        this.debug("on(" + (strify(evt)) + ", " + (strify(sel)) + ", " + (strify(dat)) + ", " + (strify(fn)) + ")");
      } catch (_error) {
        err = _error;
        this.debug("on(\"" + evt + "\", \"" + sel + "\", \"" + dat + "\", \"" + fn + "\")");
        this.debug("While attempting to stringify: " + err);
        window.errObj = {
          evt: evt,
          sel: sel,
          dat: dat,
          fn: fn
        };
      }
      return this.center.on(evt, sel, dat, fn);
    },
    one: function(evt, sel, dat, fn) {
      var err;

      try {
        this.debug("one(" + (strify(evt)) + ", " + (strify(sel)) + ", " + (strify(dat)) + ", " + (strify(fn)) + ")");
      } catch (_error) {
        err = _error;
        this.debug("one(\"" + evt + "\", \"" + sel + "\", \"" + dat + "\", \"" + fn + "\")");
        this.debug("While attempting to stringify: " + err);
        window.errObj = {
          evt: evt,
          sel: sel,
          dat: dat,
          fn: fn
        };
      }
      return this.center.one(evt, sel, dat, fn);
    },
    trigger: function(evt, pars) {
      var err;

      try {
        this.debug("trigger(" + (strify(evt)) + ", " + (strify(pars)) + ")");
      } catch (_error) {
        err = _error;
        this.debug("trigger{\"" + evt + "\", \"" + pars + "\")");
        this.debug("While attempting to stringify: " + err);
        window.errObj = {
          evt: evt,
          pars: pars
        };
      }
      return this.center.trigger(evt, pars);
    }
  };

  t = function(fn) {
    return _.debounce(fn, 10, true);
  };

  _.each(eventTree, function(sections, s) {
    Events[s] = {};
    return _.each(sections, function(objects, o) {
      Events[s][o] = {};
      return _.each(objects, function(defaultprops, a) {
        var str;

        str = "" + s + "_" + o + "_" + a;
        Events[s][o][a] = {
          name: str,
          on: function(sel, dat, fn) {
            return Events.on(str, sel, dat, fn);
          },
          one: function(sel, dat, fn) {
            return Events.one(str, sel, dat, fn);
          },
          trigger: function(pars) {
            return Events.trigger(str, pars);
          }
        };
        if (!(defaultprops != null ? defaultprops.untracked : void 0)) {
          return defaultListeners[str] = t(function(evt, info) {
            if (!_.isObject(info)) {
              if (info != null) {
                info = {
                  info: "" + info
                };
              }
            }
            if (info != null) {
              info = info.info;
            }
            return Events.track("dbb_" + str, _.extend({}, defaultprops, info, Events.context));
          });
        }
      });
    });
  });

  Events.invalidateCurrentListeners();

  module.exports = Events;

}).call(this);
}, "home": function(exports, require, module) {// Generated by CoffeeScript 1.6.2
(function() {
  var DATA_SOURCE_FIELDS, TOAST, createDash, deleteDash, initDataSourceForm, initHomePage, serverApi, toggleDataSourceForm;

  serverApi = require('poly/serverApi');

  TOAST = require('poly/error/toast');

  DATA_SOURCE_FIELDS = {
    name: {
      type: 'input-text',
      label: 'Data Source Name',
      maxLength: 200,
      placeholder: 'e.g. Customer Database'
    },
    type: {
      type: 'select',
      label: 'Data Source Type',
      "default": 'mysql',
      options: {
        mysql: {
          label: 'MySQL',
          fields: {
            connectionType: {
              type: 'select',
              label: 'Connection Type',
              "default": 'ssh',
              options: {
                ssh: {
                  label: 'SSH',
                  fields: {
                    sshUsername: {
                      type: 'input-text',
                      label: 'SSH Username',
                      "default": 'poly-user',
                      maxLength: 50
                    },
                    sshHost: {
                      type: 'input-text',
                      label: 'SSH Host',
                      placeholder: 'e.g. dbserver.example.com',
                      maxLength: 255
                    },
                    sshPort: {
                      type: 'input-text',
                      label: 'SSH Port',
                      "default": 22,
                      maxLength: 5
                    },
                    sshKey: {
                      type: 'textarea',
                      label: 'SSH Private Key'
                    },
                    dbUnixSocket: {
                      type: 'input-text',
                      label: 'MySQL Unix Socket File',
                      "default": '/var/run/mysqld/mysqld.sock',
                      maxLength: 100
                    }
                  }
                },
                direct: {
                  label: 'Direct connection',
                  fields: {
                    dbHost: {
                      type: 'input-text',
                      label: 'Host',
                      maxLength: 255,
                      placeholder: 'e.g. db.example.com'
                    },
                    dbPort: {
                      type: 'input-text',
                      label: 'Port',
                      "default": '3306',
                      maxLength: 5
                    }
                  }
                }
              }
            },
            dbUsername: {
              type: 'input-text',
              label: 'Database Username',
              "default": 'poly-user',
              maxLength: 50
            },
            dbPassword: {
              type: 'input-password',
              label: 'Database Password',
              maxLength: 50
            },
            dbName: {
              type: 'input-text',
              label: 'Database Name',
              maxLength: 60
            }
          }
        },
        infobright: {
          label: 'Infobright',
          fields: {
            connectionType: {
              type: 'select',
              label: 'Connection Type',
              "default": 'ssh',
              options: {
                ssh: {
                  label: 'SSH',
                  fields: {
                    sshUsername: {
                      type: 'input-text',
                      label: 'SSH Username',
                      "default": 'poly-user',
                      maxLength: 50
                    },
                    sshHost: {
                      type: 'input-text',
                      label: 'SSH Host',
                      placeholder: 'e.g. dbserver.example.com',
                      maxLength: 255
                    },
                    sshPort: {
                      type: 'input-text',
                      label: 'SSH Port',
                      "default": 22,
                      maxLength: 5
                    },
                    sshKey: {
                      type: 'textarea',
                      label: 'SSH Private Key'
                    },
                    dbUnixSocket: {
                      type: 'input-text',
                      label: 'MySQL Unix Socket File',
                      "default": '/tmp/mysql-ib.sock',
                      maxLength: 100
                    }
                  }
                },
                direct: {
                  label: 'Direct connection',
                  fields: {
                    dbHost: {
                      type: 'input-text',
                      label: 'Host',
                      maxLength: 255,
                      placeholder: 'e.g. db.example.com'
                    },
                    dbPort: {
                      type: 'input-text',
                      label: 'Port',
                      "default": '5029',
                      maxLength: 5
                    }
                  }
                }
              }
            },
            dbUsername: {
              type: 'input-text',
              label: 'Username',
              "default": 'poly-user',
              maxLength: 50
            },
            dbPassword: {
              type: 'input-password',
              label: 'Password',
              maxLength: 50
            },
            dbName: {
              type: 'input-text',
              label: 'Database Name',
              maxLength: 60
            }
          }
        },
        postgresql: {
          label: 'PostgreSQL',
          fields: {
            connectionType: {
              type: 'input-hidden',
              value: 'direct'
            },
            dbHost: {
              type: 'input-text',
              label: 'Host',
              maxLength: 255,
              placeholder: 'e.g. db.example.com'
            },
            dbPort: {
              type: 'input-text',
              label: 'Port',
              "default": '5432',
              maxLength: 5
            },
            dbUsername: {
              type: 'input-text',
              label: 'Username',
              "default": 'poly-user',
              maxLength: 50
            },
            dbPassword: {
              type: 'input-password',
              label: 'Password',
              maxLength: 50
            },
            dbName: {
              type: 'input-text',
              label: 'Database Name',
              maxLength: 60
            }
          }
        },
        salesforce: {
          label: 'Salesforce'
        },
        googleAnalytics: {
          label: 'Google Analytics'
        }
      }
    }
  };

  createDash = function(dsKey, name) {
    var callback, data;

    callback = function(err, response) {
      var dom;

      if (err) {
        console.error(err);
        return TOAST.raise('Error creating dashboard');
      } else {
        dom = $("#dashboard-item-template").clone();
        dom.removeClass("template");
        $(".dashboard-name", dom).html(name);
        $(".dashboard-name", dom).attr("href", "dashboard/" + response.key + "/edit");
        $(".dashboards").append(dom);
        return window.location.reload();
      }
    };
    data = {
      name: name,
      spec: {},
      dataCollection: [
        {
          dataSourceKey: dsKey,
          tableNames: ['nothing']
        }
      ]
    };
    return serverApi.sendPost('/dashboard/create', data, callback);
  };

  deleteDash = function(dsKey) {
    var callback;

    callback = function(err, response) {
      if (err) {
        console.error(err);
        return TOAST.raise('Error deleting dashboard');
      } else {
        return window.location.reload();
      }
    };
    return serverApi.sendPost('/dashboard/' + dsKey + '/delete', {}, callback);
  };

  toggleDataSourceForm = function() {
    var animateTo,
      _this = this;

    if (!$('#new-data-source').is(":visible")) {
      $('#new-data-source').show();
      $('#toggle-data-source').addClass('active');
      $('#new-data-source').height("auto");
      animateTo = $('#new-data-source').height();
      $('#new-data-source').height(0);
      $('#new-data-source').height(animateTo);
      $('#data-sources').css('max-height', animateTo);
      return $("#new-data-source .submit IMG").attr({
        width: $("#toggle-data-source IMG").attr("width"),
        height: $("#toggle-data-source IMG").attr("height")
      });
    } else {
      $('#new-data-source').height(0);
      _.delay(function() {
        return $('#new-data-source').hide();
      }, 400);
      $('#toggle-data-source').removeClass('active');
      return $('#data-sources').css('max-height', 'none');
    }
  };

  initHomePage = function() {
    var _this = this;

    $('#toggle-data-source').click(toggleDataSourceForm);
    $('.create-dash').click(function(evt) {
      var e, key, name, node;

      try {
        node = evt.target;
        while ($(node).attr('class') !== 'create-dash btn-large') {
          node = node.parentNode;
        }
      } catch (_error) {
        e = _error;
        throw "Invalid click target";
      }
      key = $(node).attr("data-key");
      name = $(node).attr("data-name");
      if (!key || !name) {
        throw "Invalid attributes on create-dash button";
      }
      return createDash(key, name);
    });
    $('.delete-dash').click(function(evt) {
      var e, key, node;

      try {
        node = evt.target;
        while ($(node).attr('class') !== 'btn-flat delete-dash') {
          node = node.parentNode;
        }
      } catch (_error) {
        e = _error;
        throw "Invalid click target";
      }
      key = $(node).attr("data-key");
      if (!key) {
        throw "Invalid attributes on delete-dash button";
      }
      return deleteDash(key);
    });
    _.each($(".dashboard-preview"), function(dom) {
      $(dom).mouseenter(function() {
        $(".dashboard-info", dom).css({
          height: $(dom).height(),
          bottom: $(dom).height()
        });
        $(".dashboard-options", dom).stop(true, true).fadeIn();
        return $(".dashboard-title", dom).stop(true, true).fadeOut("fast");
      });
      return $(dom).mouseleave(function() {
        $(".dashboard-info", dom).css({
          height: "35px",
          bottom: "35px"
        });
        $(".dashboard-options", dom).stop(true, true).fadeOut();
        return $(".dashboard-title", dom).stop(true, true).fadeIn();
      });
    });
    return initDataSourceForm();
  };

  initDataSourceForm = function() {
    var appendField, appendFieldGroup, extractFieldValues;

    $('#new-data-source').hide();
    appendField = function(fieldName, field, parent) {
      var attrs, button, buttonContent, container, input, label, name, option, optionAttrs, optionInfo, optionName, select, showing, textarea, _ref, _ref1, _results;

      container = $('<div>');
      container.addClass(fieldName);
      container.addClass('field');
      container.data('name', fieldName);
      container.data('value', field.value || field["default"] || '');
      if (field.label) {
        label = $('<label>');
        label.text(field.label);
        label.appendTo(container);
        container.data('label', field.label);
      }
      switch (field.type) {
        case 'input-text':
        case 'input-password':
        case 'input-hidden':
          attrs = {};
          switch (field.type) {
            case 'input-hidden':
              attrs.type = 'hidden';
              break;
            case 'input-text':
              attrs.type = 'text';
              break;
            case 'input-password':
              attrs.type = 'password';
          }
          if (field.value || field["default"]) {
            attrs.value = field.value || field["default"];
          }
          if (field.placeholder) {
            attrs.placeholder = field.placeholder;
          }
          if (field.maxLength) {
            attrs.maxlength = field.maxLength;
          }
          input = $('<input>', attrs);
          input.on('change', function(event) {
            return container.data('value', input.val());
          });
          input.appendTo(container);
          break;
        case 'textarea':
          textarea = $('<textarea>');
          if (field["default"]) {
            textarea.val(field["default"]);
          }
          textarea.on('change', function(event) {
            return container.data('value', textarea.val());
          });
          textarea.appendTo(container);
          break;
        case 'select':
          if (!field["default"]) {
            throw new Error("no default specified for '" + fieldName + "' field");
          }
          select = $('<select>');
          select.on('change', function(event) {
            var selectedOptionName;

            selectedOptionName = select.find('option:selected').val();
            parent.children('.field-group').removeClass('showing');
            parent.children(".field-group." + selectedOptionName).addClass('showing');
            return container.data('value', selectedOptionName);
          });
          _ref = field.options;
          for (optionName in _ref) {
            optionInfo = _ref[optionName];
            optionAttrs = {};
            optionAttrs.value = optionName;
            if (optionName === field["default"]) {
              optionAttrs.selected = 'selected';
            }
            option = $('<option>', optionAttrs);
            option.text(optionInfo.label);
            option.appendTo(select);
          }
          select.appendTo(container);
          break;
        case 'button':
          button = $('<div>', {
            tabindex: 0
          });
          button.addClass('btn-large');
          button.addClass('green');
          if (field.onClick) {
            button.on('click', field.onClick);
            button.on('keypress', function(event) {
              if (event.which === 13) {
                return $(this).click();
              }
            });
          }
          buttonContent = $('<div>');
          buttonContent.addClass('content');
          if (field.contentHtml) {
            buttonContent.html(field.contentHtml);
          }
          buttonContent.appendTo(button);
          button.appendTo(container);
          break;
        default:
          throw new Error("Unknown field type: " + field.type);
      }
      container.appendTo(parent);
      switch (field.type) {
        case 'input-hidden':
          return container.hide();
        case 'select':
          _ref1 = field.options;
          _results = [];
          for (optionName in _ref1) {
            optionInfo = _ref1[optionName];
            if (optionInfo.fields) {
              name = optionName;
              showing = optionName === field["default"];
              _results.push(appendFieldGroup(optionInfo.fields, name, showing, parent));
            } else {
              _results.push(void 0);
            }
          }
          return _results;
      }
    };
    appendFieldGroup = function(fields, name, showing, parent, prepend) {
      var container, field, fieldName;

      if (prepend == null) {
        prepend = false;
      }
      container = $('<div>');
      container.addClass('field-group');
      if (name) {
        container.addClass(name);
      }
      if (showing) {
        container.addClass('showing');
      }
      for (fieldName in fields) {
        field = fields[fieldName];
        appendField(fieldName, field, container);
      }
      if (prepend) {
        return container.prependTo(parent);
      } else {
        return container.appendTo(parent);
      }
    };
    appendFieldGroup(DATA_SOURCE_FIELDS, null, true, $('form.data-source-create'), true);
    $('.btn-large.submit').click(function() {
      return $('#new-data-source FORM').submit();
    });
    $('.btn-large.cancel').click(toggleDataSourceForm);
    $('.btn-large.submit, .btn-large.cancel').keypress(function(event) {
      if (event.which === 13) {
        return $(this).click();
      }
    });
    extractFieldValues = function(fieldGroup) {
      var result;

      result = {};
      fieldGroup.children('.field').each(function() {
        var label, name, value;

        name = $(this).data('name');
        value = $(this).data('value');
        if (!value) {
          label = $(this).data('label');
          alert("" + (label || name) + " required");
          throw new Error('empty required field');
        }
        return result[name] = value;
      });
      fieldGroup.children('.field-group.showing').each(function() {
        return $.extend(result, extractFieldValues($(this)));
      });
      return result;
    };
    return $('form.data-source-create').submit(function(event) {
      var data;

      event.preventDefault();
      data = extractFieldValues($('form.data-source-create > .field-group'));
      return serverApi.sendPost('/data-source/create', data, function(err, resp) {
        if (err) {
          console.error(err);
          return TOAST.raise('Could not create data source.  ' + 'Please check your information and try again.');
        } else {
          console.log(resp);
          if (resp.key) {
            alert("Data source added successfully!");
            return window.location.reload();
          } else if (resp.redirect) {
            return window.location = resp.redirect;
          }
        }
      });
    });
  };

  $(initHomePage);

}).call(this);
}, "poly": function(exports, require, module) {// Generated by CoffeeScript 1.6.2
(function() {
  var ChartMainView, ChartViewerMainView, DashMainView, DashViewerMainView, LocalDataSource, RemoteDataSource, _ref;

  require('poly/init');

  DashMainView = require('poly/main/dashboard');

  DashViewerMainView = require('poly/main/dashviewer');

  ChartMainView = require('poly/main/chartbuilder');

  ChartViewerMainView = require('poly/main/chartviewer');

  _ref = require('poly/data/dataSource'), LocalDataSource = _ref.LocalDataSource, RemoteDataSource = _ref.RemoteDataSource;

  module.exports = {
    dashboard: function(params) {
      var view;

      view = new DashMainView(params);
      ko.renderTemplate("tmpl-main", view, {}, params.dom);
      return {
        serialize: view.serialize
      };
    },
    dashviewer: function(params) {
      var view;

      view = new DashViewerMainView(params);
      ko.renderTemplate("tmpl-dashboard-viewer", view, {}, params.dom);
      return {};
    },
    chartbuilder: function(params) {
      var view;

      view = new ChartMainView(params);
      ko.renderTemplate("tmpl-main-chart", view, {}, params.dom);
      return {
        serialize: view.serialize
      };
    },
    chartviewer: function(params) {
      var view;

      view = new ChartViewerMainView(params);
      ko.renderTemplate("tmpl-chart-viewer", view, {
        afterRender: view.init
      }, params.dom);
      return {};
    },
    data: function(args) {
      switch (args.type) {
        case 'local':
          return new LocalDataSource(args.tables);
        case 'remote':
          return new RemoteDataSource(args.key);
      }
    }
  };

}).call(this);
}, "poly/anim": function(exports, require, module) {// Generated by CoffeeScript 1.6.2
(function() {
  var ANIMATIONS, Animation,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  ANIMATIONS = {
    loading: {
      interval: 200,
      frames: ['anim_loading_0.svg', 'anim_loading_1.svg', 'anim_loading_2.svg']
    }
  };

  Animation = (function() {
    function Animation(animName, container) {
      this.stopOnImage = __bind(this.stopOnImage, this);
      this.remove = __bind(this.remove, this);
      var advFrame, anim, curFrame, div, images,
        _this = this;

      anim = ANIMATIONS[animName];
      if (!anim) {
        throw "Animation " + animName + " does not exist!";
      }
      this.div = div = $("<DIV>");
      div.addClass("anim");
      div.addClass(animName);
      $(container).append(div);
      _.defer(function() {
        return div.css({
          width: div.height(),
          marginLeft: -div.height() / 2,
          marginTop: -div.height() / 2
        });
      });
      images = _.map(anim.frames, function(src) {
        var img;

        img = new Image();
        img.src = 'assets/' + src;
        return img;
      });
      curFrame = 0;
      advFrame = function() {
        div.css('background-image', 'url(' + images[curFrame].src + ')');
        return curFrame = (curFrame + 1) % images.length;
      };
      this.interval = setInterval(advFrame, anim.interval);
    }

    Animation.prototype.remove = function() {
      this.div.remove();
      return clearInterval(this.interval);
    };

    Animation.prototype.stopOnImage = function(imgSrc) {
      this.div.css('background-image', 'url(' + imgSrc + ')');
      return clearInterval(this.interval);
    };

    return Animation;

  })();

  module.exports = Animation;

}).call(this);
}, "poly/bindings": function(exports, require, module) {// Generated by CoffeeScript 1.6.2
/*
custom KO bindings.
Refer to [Custom Bindings](http://knockoutjs.com/documentation/custom-bindings.html)
for the instructions.
*/


(function() {
  var CONST, Events, dnd, init, pui_contentEditable, pui_dndContainer, pui_dropdown, register, setDropdownOptionsData, _registeredBindings,
    _this = this;

  dnd = require('poly/dnd');

  CONST = require('poly/const');

  Events = require('events');

  "use strict";

  pui_dndContainer = {
    init: function(element, valueAccessor) {
      var datatype, dropfilter, initDroppableClick, itemdiscard, itementer, name, options, paneltype, rerender, view,
        _this = this;

      view = valueAccessor();
      datatype = view.datatype, paneltype = view.paneltype, itementer = view.itementer, itemdiscard = view.itemdiscard, dropfilter = view.dropfilter, name = view.name, rerender = view.rerender;
      dropfilter || (dropfilter = function() {
        return true;
      });
      options = {
        datatype: datatype,
        paneltype: paneltype,
        itementer: itementer,
        itemdiscard: itemdiscard,
        dropfilter: dropfilter,
        name: name
      };
      dnd.initDroppable($(element), options);
      initDroppableClick = function() {
        return $('.droppable', element).click(function() {
          Events.ui.dnd.targetselect.trigger({
            info: {
              target: name
            }
          });
          $('.table-metric-list.selected .metric').filter(function() {
            return dropfilter(this);
          }).addClass('highlight');
          return Events.ui.highlight.begin.trigger({
            selector: '.highlight:visible:not(.disabled)',
            click: function(event, $target) {
              if (dropfilter($target)) {
                Events.ui.dnd.bazinga.trigger({
                  info: {
                    name: $target.data('dnd-data').name
                  }
                });
                return itementer(event, {
                  dom: $target,
                  data: $target.data('dnd-data')
                });
              } else {

              }
            }
          });
        });
      };
      _.defer(initDroppableClick);
      if (rerender) {
        return rerender.subscribe(function() {
          return _.defer(initDroppableClick);
        });
      }
    }
  };

  setDropdownOptionsData = function(element, selected, options, hasIcons) {
    var optionsData,
      _this = this;

    optionsData = _.map(options, function(o) {
      if (o.length !== 2 || !_.isString(o[0])) {
        throw "pui_dropdown options must be an array of the form [[\"Name 1\", value], [\"Name 2\", value]]";
      }
      return {
        iconClass: hasIcons ? "select-icon img-icon-" + o[1] : null,
        text: o[0],
        value: o[1],
        selected: selected,
        handler: function() {
          return selected(o);
        }
      };
    });
    return $(element).data("optionsData", optionsData);
  };

  pui_dropdown = {
    init: function(element, valueAccessor) {
      var $element, clickHandler, handleDropdownChange, hasIcons, hideDropdown, isDropdownVisible, name, options, selected, showDropdown, value,
        _this = this;

      $element = $(element);
      value = ko.utils.unwrapObservable(valueAccessor());
      selected = value.selected, options = value.options, hasIcons = value.hasIcons, name = value.name;
      if (ko.isObservable(options)) {
        options = options();
      }
      isDropdownVisible = false;
      $element.on(Events.ui.dropdown.shown.name, function() {
        isDropdownVisible = true;
        $element.addClass('dropdown-active');
        return $element.removeClass('dropdown-inactive');
      });
      $element.on(Events.ui.dropdown.hidden.name, function() {
        isDropdownVisible = false;
        $element.removeClass('dropdown-active');
        return $element.addClass('dropdown-inactive');
      });
      handleDropdownChange = function(selected) {
        $('.select-icon', element).attr('class', "select-icon img-icon-" + selected[1]);
        $('.name', element).html(selected[0]);
        hideDropdown();
        return Events.ui.dropdown.choose.trigger({
          info: {
            name: name,
            value: selected[1]
          }
        });
      };
      selected.subscribe(function() {
        return handleDropdownChange(selected());
      });
      showDropdown = function() {
        var optionsData;

        optionsData = $element.data("optionsData");
        return Events.ui.dropdown.show.trigger({
          targetDom: $element,
          data: {
            options: optionsData
          },
          templateName: 'tmpl-dropdown-select-menu',
          info: {
            name: name
          }
        });
      };
      hideDropdown = function() {
        return Events.ui.dropdown.hide.trigger({
          targetDom: $element
        });
      };
      clickHandler = function() {
        if (isDropdownVisible) {
          return hideDropdown();
        } else {
          return showDropdown();
        }
      };
      $element.click(_.throttle(clickHandler));
      ko.applyBindingsToNode(element, {
        template: {
          name: hasIcons ? 'tmpl-dropdown' : 'tmpl-dropdown-no-icon'
        }
      });
      $element.addClass('dropdown-inactive');
      setDropdownOptionsData(element, selected, options, hasIcons);
      return handleDropdownChange(selected());
    },
    update: function(element, valueAccessor) {
      var hasIcons, options, selected, value;

      value = ko.utils.unwrapObservable(valueAccessor());
      selected = value.selected, options = value.options, hasIcons = value.hasIcons;
      if (ko.isObservable(options)) {
        options = options();
      }
      return setDropdownOptionsData(element, selected, options, hasIcons);
    }
  };

  pui_contentEditable = {
    init: function(element, valueAccessor, allBindingsAccessor) {
      $(element).on('keydown', function(evt) {
        if (evt.keyCode === 13 || evt.keyCode === 27) {
          $(element).blur();
          return evt.preventDefault();
        }
      });
      $(element).on('keyup', function(evt) {
        var allBindings, elementValue, modelValue;

        modelValue = valueAccessor();
        elementValue = element.innerHTML;
        if (ko.isWriteableObservable(modelValue)) {
          return modelValue(elementValue);
        } else {
          allBindings = allBindingsAccessor();
          if (allBindings['_ko_property_writers'] && allBindings['_ko_property_writers'].htmlValue) {
            return allBindings['_ko_property_writers'].htmlValue(elementValue);
          }
        }
      });
      $(element).on('mouseover', function() {
        return $(element).addClass('hover');
      });
      $(element).on('mouseout', function() {
        return $(element).removeClass('hover');
      });
      return $(element).on('click', function() {
        return $(element).focus();
      });
    },
    update: function(element, valueAccessor) {
      var value;

      value = ko.utils.unwrapObservable(valueAccessor()) || '';
      if (element.innerHTML !== value) {
        return element.innerHTML = value;
      }
    }
  };

  _registeredBindings = {};

  register = function(bindings) {
    return _.extend(_registeredBindings, bindings);
  };

  init = function() {
    return _.extend(ko.bindingHandlers, _registeredBindings);
  };

  register({
    pui_dndContainer: pui_dndContainer,
    pui_dropdown: pui_dropdown,
    pui_contentEditable: pui_contentEditable
  });

  module.exports = {
    init: init,
    register: register
  };

}).call(this);
}, "poly/chart/advancedPanel": function(exports, require, module) {// Generated by CoffeeScript 1.6.2
(function() {
  var AdvancedPanelView, CONST, CoordView, DND, Events, FacetMetricView, FacetView, Parser, parser,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  DND = require('poly/dnd');

  CONST = require('poly/const');

  Events = require('events');

  FacetMetricView = require('poly/data/metric/facet');

  Parser = require('poly/parser');

  parser = new Parser();

  AdvancedPanelView = (function() {
    function AdvancedPanelView(tableMetaData) {
      this.tableMetaData = tableMetaData;
      this.toggleExpand = __bind(this.toggleExpand, this);
      this.expanded = ko.observable(false);
      this.facetView = new FacetView(this.tableMetaData);
      this.coordView = new CoordView();
      this.panelTop = ko.observable(0);
      this.shadeOpacity = ko.observable(0);
      this.shadeHeight = ko.observable(0);
    }

    AdvancedPanelView.prototype.toggleExpand = function() {
      var _this = this;

      if (!this.expanded()) {
        this.expanded(true);
        this.panelTop(-$("#advanced-panel").height() + 36);
        this.shadeOpacity(1);
        this.shadeHeight($(".menu-container").outerHeight());
        $("BODY").addClass("scrolling-disabled");
        return $(this).trigger(Events.ui.quickadd.expand.name);
      } else {
        this.panelTop(0);
        this.shadeOpacity(0.01);
        setTimeout(function() {
          $("BODY").removeClass("scrolling-disabled");
          return _this.expanded(false);
        }, 400);
        return $(this).trigger(Events.ui.quickadd.collapse.name);
      }
    };

    return AdvancedPanelView;

  })();

  FacetView = (function() {
    function FacetView(tableMetaData) {
      this.tableMetaData = tableMetaData;
      this.reset = __bind(this.reset, this);
      this.initMetricItem = __bind(this.initMetricItem, this);
      this.generateSpec = __bind(this.generateSpec, this);
      this.onDiscard = __bind(this.onDiscard, this);
      this.onEnter = __bind(this.onEnter, this);
      this.metric = ko.observable();
    }

    FacetView.prototype.metricTemplate = 'tmpl-metric-attached';

    FacetView.prototype.onEnter = function(event, item) {
      var m;

      if (this.metric()) {
        this.metric().close();
      }
      m = new FacetMetricView(this.tableMetaData, item.data);
      this.metric(m);
      return Events.ui.chart.render.trigger();
    };

    FacetView.prototype.onDiscard = function() {
      this.metric().close();
      this.metric(null);
      return Events.ui.chart.render.trigger();
    };

    FacetView.prototype.generateSpec = function() {
      if (this.metric()) {
        return {
          type: 'wrap',
          "var": this.metric().generateSpec(),
          tableName: this.metric().tableName
        };
      } else {
        return {};
      }
    };

    FacetView.prototype.initMetricItem = function(dom, view) {
      DND.makeDraggable(dom, view);
      return view.attachDropdown(dom);
    };

    FacetView.prototype.reset = function(spec) {
      var m, name, params;

      if (spec["var"] && spec.tableName) {
        name = parser.getName(spec["var"]["var"]);
        params = {
          name: name,
          tableName: spec.tableName
        };
        m = new FacetMetricView(this.tableMetaData, params);
        return this.metric(m);
      } else {
        if (this.metric()) {
          this.metric().close();
        }
        return this.metric(null);
      }
    };

    return FacetView;

  })();

  CoordView = (function() {
    function CoordView() {
      this.flipClick = __bind(this.flipClick, this);
      this.polarClick = __bind(this.polarClick, this);
      this.generateSpec = __bind(this.generateSpec, this);
      this.reset = __bind(this.reset, this);
      var _this = this;

      this.flip = ko.observable(false);
      this.polar = ko.observable(false);
      this.polarText = ko.computed(function() {
        if (_this.polar()) {
          return "Change to Cartesian";
        } else {
          return "Change to Polar";
        }
      });
      this.flip.subscribe(function() {
        return Events.ui.chart.render.trigger();
      });
      this.polar.subscribe(function() {
        return Events.ui.chart.render.trigger();
      });
    }

    CoordView.prototype.reset = function(spec) {
      this.polar(spec.type === 'polar');
      return this.flip(!!spec.flip);
    };

    CoordView.prototype.generateSpec = function() {
      return {
        type: this.polar() ? 'polar' : 'cartesian',
        flip: this.flip()
      };
    };

    CoordView.prototype.polarClick = function() {
      return this.polar(!this.polar());
    };

    CoordView.prototype.flipClick = function() {
      return this.flip(!this.flip());
    };

    return CoordView;

  })();

  module.exports = AdvancedPanelView;

}).call(this);
}, "poly/chart/aes/base": function(exports, require, module) {// Generated by CoffeeScript 1.6.2
(function() {
  var Aesthetic, CONST, DND, Events, LayerMetricView, Parser, TOAST, parser,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  CONST = require('poly/const');

  DND = require('poly/dnd');

  TOAST = require('poly/error/toast');

  Events = require('events');

  LayerMetricView = require('poly/data/metric/layer');

  Parser = require('poly/parser');

  parser = new Parser();

  Aesthetic = (function() {
    Aesthetic.prototype.template = 'tmpl-aesthetic';

    Aesthetic.prototype.metricTemplate = 'tmpl-metric-attached';

    function Aesthetic(aes, name, layer, tableMetaData) {
      var _this = this;

      this.aes = aes;
      this.name = name;
      this.layer = layer;
      this.tableMetaData = tableMetaData;
      this.enable = __bind(this.enable, this);
      this.disable = __bind(this.disable, this);
      this.render = __bind(this.render, this);
      this.layerTypeUpdated = __bind(this.layerTypeUpdated, this);
      this.initMetricItem = __bind(this.initMetricItem, this);
      this.onDiscard = __bind(this.onDiscard, this);
      this.onEnter = __bind(this.onEnter, this);
      this._getConstant = __bind(this._getConstant, this);
      this._setConstant = __bind(this._setConstant, this);
      this.generateSpec = __bind(this.generateSpec, this);
      this.init = __bind(this.init, this);
      this.metric = ko.observable(false);
      this.metric.subscribe(function(m) {
        return $(m).on(Events.ui.metric.remove.name, _this.onDiscard);
      });
      this.options = ko.computed(function() {
        return _this.layer.layerRestrictions()[_this.aes];
      });
      this.options.subscribe(this.layerTypeUpdated);
      this.enabled = ko.observable(true);
    }

    Aesthetic.prototype.init = function(spec, tableName) {
      var defaults, metric, name, params;

      if (spec == null) {
        spec = {};
      }
      if (spec["var"] && tableName) {
        name = parser.getName(spec["var"]);
        params = {
          name: name,
          tableName: tableName
        };
        defaults = {
          sort: spec.sort,
          asc: spec.asc,
          bin: parser.getBinwidth(spec["var"]),
          stats: CONST.stats.statToName[parser.getStats(spec["var"])]
        };
        metric = new LayerMetricView(this.layer.tableMetaData, params, this.options, this.layer, this.name, defaults);
        return this.metric(metric);
      } else if (spec["const"]) {
        return this._setConstant(spec);
      }
    };

    Aesthetic.prototype.generateSpec = function() {
      if (this.metric()) {
        return this.metric().generateSpec();
      } else {
        return this._getConstant();
      }
    };

    Aesthetic.prototype._setConstant = function(spec) {};

    Aesthetic.prototype._getConstant = function() {
      return null;
    };

    Aesthetic.prototype.onEnter = function(event, item) {
      var acceptableTypes, m, _ref;

      if (this.metric()) {
        this.metric().close();
      }
      acceptableTypes = this.options().type;
      if (!this.layer.sanityCheckMetric(item.data)) {
        TOAST.raise("Data in the same layer must be from the same table!");
        return;
      }
      m = new LayerMetricView(this.layer.tableMetaData, item.data, this.options, this.layer, this.name);
      if (!(_ref = m.meta.type, __indexOf.call(acceptableTypes, _ref) >= 0)) {
        TOAST.raise("Data type is not one of the acceptable types!");
        return;
      }
      this.metric(m);
      return this.render();
    };

    Aesthetic.prototype.onDiscard = function(event, metricItem) {
      this.metric().close();
      this.metric(null);
      return this.render();
    };

    Aesthetic.prototype.initMetricItem = function(dom, view) {
      DND.makeDraggable(dom, view);
      return view.attachDropdown(dom);
    };

    Aesthetic.prototype.layerTypeUpdated = function() {
      var acceptableTypes, _ref;

      if (!this.metric()) {
        return;
      }
      acceptableTypes = this.options().type;
      if (!(_ref = this.metric().type, __indexOf.call(acceptableTypes, _ref) >= 0)) {
        return this.metric(null);
      }
    };

    Aesthetic.prototype.render = function() {
      return Events.ui.chart.render.trigger();
    };

    Aesthetic.prototype.afterRender = function(dom) {};

    Aesthetic.prototype.disable = function() {
      return this.enabled(false);
    };

    Aesthetic.prototype.enable = function() {
      return this.enabled(true);
    };

    Aesthetic.prototype.dropFilter = function() {
      return true;
    };

    return Aesthetic;

  })();

  module.exports = Aesthetic;

}).call(this);
}, "poly/chart/aes/color": function(exports, require, module) {// Generated by CoffeeScript 1.6.2
(function() {
  var Aesthetic, ColorAesthetic,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Aesthetic = require('poly/chart/aes/base');

  ColorAesthetic = (function(_super) {
    __extends(ColorAesthetic, _super);

    ColorAesthetic.prototype.template = 'tmpl-aesthetic-color';

    function ColorAesthetic(aes, name, parent) {
      this.aes = aes;
      this.name = name;
      this.parent = parent;
      this._getConstant = __bind(this._getConstant, this);
      this._setConstant = __bind(this._setConstant, this);
      this.afterRender = __bind(this.afterRender, this);
      this.onDiscard = __bind(this.onDiscard, this);
      ColorAesthetic.__super__.constructor.call(this, this.aes, this.name, this.parent);
      this.selected = 'steelblue';
      this.defaultValue = 'steelblue';
      this.value = ko.observable(this.defaultValue);
      this.value.subscribe(this.render);
    }

    ColorAesthetic.prototype.onDiscard = function(event, metricItem) {
      this.metric(null);
      this.render();
      return this.afterRender(this.dom);
    };

    ColorAesthetic.prototype.afterRender = function(dom) {
      var simpleColor,
        _this = this;

      this.dom = dom;
      simpleColor = $('.selector', dom);
      simpleColor.attr('value', this.value());
      simpleColor.simpleColor({
        cellWidth: 15,
        cellHeight: 15,
        boxWidth: 50,
        boxHeight: 15,
        border: 0,
        columns: 9
      });
      simpleColor.bind('change', function(evt) {
        return _this.value(evt.target.value);
      });
      return $(".simpleColorContainer", dom).click(function() {
        return false;
      });
    };

    ColorAesthetic.prototype._setConstant = function(spec) {
      if (spec["const"]) {
        return this.value(spec["const"]);
      }
    };

    ColorAesthetic.prototype._getConstant = function() {
      return {
        "const": this.value()
      };
    };

    return ColorAesthetic;

  })(Aesthetic);

  module.exports = ColorAesthetic;

}).call(this);
}, "poly/chart/aes/size": function(exports, require, module) {// Generated by CoffeeScript 1.6.2
(function() {
  var Aesthetic, SizeAesthetic,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Aesthetic = require('poly/chart/aes/base');

  SizeAesthetic = (function(_super) {
    __extends(SizeAesthetic, _super);

    SizeAesthetic.prototype.template = 'tmpl-aesthetic-size';

    function SizeAesthetic(aes, name, parent) {
      this.aes = aes;
      this.name = name;
      this.parent = parent;
      this._getConstant = __bind(this._getConstant, this);
      this._setConstant = __bind(this._setConstant, this);
      this.afterRender = __bind(this.afterRender, this);
      this.onDiscard = __bind(this.onDiscard, this);
      SizeAesthetic.__super__.constructor.call(this, this.aes, this.name, this.parent);
      this.selected = 1;
      this.defaultValue = 2;
      this.value = ko.observable(this.defaultValue);
      this.value.subscribe(this.render);
    }

    SizeAesthetic.prototype.onDiscard = function(event, metricItem) {
      this.metric(null);
      this.render();
      return this.afterRender(this.dom);
    };

    SizeAesthetic.prototype.afterRender = function(dom) {
      var slider,
        _this = this;

      this.dom = dom;
      slider = $('.selector', dom);
      slider.slider({
        max: 10,
        min: 1,
        step: 1,
        value: this.value()
      });
      return slider.bind('slidechange', function(evt, ui) {
        return _this.value(ui.value);
      });
    };

    SizeAesthetic.prototype._setConstant = function(spec) {
      if (spec["const"]) {
        return this.value(spec["const"]);
      }
    };

    SizeAesthetic.prototype._getConstant = function() {
      return {
        "const": this.value()
      };
    };

    return SizeAesthetic;

  })(Aesthetic);

  module.exports = SizeAesthetic;

}).call(this);
}, "poly/chart/chartbuilder": function(exports, require, module) {// Generated by CoffeeScript 1.6.2
(function() {
  var AdvancedPanelView, CONST, ChartbuilderView, Events, FiltersView, LayerView, TOAST,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  CONST = require('poly/const');

  TOAST = require('poly/error/toast');

  Events = require('events');

  LayerView = require('poly/chart/layer');

  AdvancedPanelView = require('poly/chart/advancedPanel');

  FiltersView = require('poly/chart/filters');

  ChartbuilderView = (function() {
    function ChartbuilderView(tableMetaData) {
      this.tableMetaData = tableMetaData;
      this.enableLayerDraggables = __bind(this.enableLayerDraggables, this);
      this.disableLayerDraggables = __bind(this.disableLayerDraggables, this);
      this.addLayer = __bind(this.addLayer, this);
      this.removeLayer = __bind(this.removeLayer, this);
      this.initChartDom = __bind(this.initChartDom, this);
      this._render = __bind(this._render, this);
      this.render = _.debounce(this._render, 10);
      this.advancedPanel = new AdvancedPanelView(this.tableMetaData);
      this.layers = ko.observableArray();
      this.title = ko.observable("Untitled Chart");
      Events.ui.chart.render.on(this.render);
      $(this.advancedPanel).on(Events.ui.quickadd.expand.name, this.disableLayerDraggables);
      $(this.advancedPanel).on(Events.ui.quickadd.collapse.name, this.enableLayerDraggables);
      this.addLayer();
      this.filtersView = new FiltersView(this.tableMetaData);
    }

    ChartbuilderView.prototype.reset = function(params) {
      var coord, facet, filter, layerspec, spec, tableName, _i, _len, _ref, _ref1, _ref2, _ref3;

      this.params = params != null ? params : {};
      this.spec = (_ref = this.params.spec) != null ? _ref : {};
      layerspec = (this.spec.layers != null) && _.isArray(this.spec.layers) ? this.spec.layers : this.spec.layer != null ? [this.spec.layer] : [];
      this.layers.removeAll();
      if (_.isArray(layerspec) && layerspec.length > 0) {
        for (_i = 0, _len = layerspec.length; _i < _len; _i++) {
          spec = layerspec[_i];
          this.addLayer(spec);
        }
      } else {
        this.addLayer();
      }
      coord = (_ref1 = this.spec.coord) != null ? _ref1 : {};
      this.advancedPanel.coordView.reset(coord);
      facet = (_ref2 = this.spec.facet) != null ? _ref2 : {};
      this.advancedPanel.facetView.reset(facet);
      this.title(this.spec.title);
      if (this.spec.layers) {
        filter = (_ref3 = this.spec.layers[0].filter) != null ? _ref3 : {};
        tableName = this.spec.layers[0].tableName;
        this.filtersView.reset(filter, tableName);
        return Events.ui.table.focus.trigger({
          name: tableName
        });
      }
    };

    ChartbuilderView.prototype.serialize = function() {
      var layers, spec, _i, _len, _ref;

      spec = $.extend(true, {}, this.spec);
      delete spec.dom;
      delete spec.data;
      if (spec.layer) {
        delete spec.layer.data;
      }
      if (spec.layers) {
        _ref = spec.layers;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          layers = _ref[_i];
          delete layers.data;
        }
      }
      return spec;
    };

    ChartbuilderView.prototype._render = function(event, params) {
      var $dom, coord, error, facet, filterSpec, h, l, layer, layers, spec, tmp, w, _i, _len, _ref, _ref1, _ref2, _ref3, _ref4, _ref5,
        _this = this;

      $dom = $(this.chartDom);
      w = $dom.parent().width();
      h = $dom.parent().height();
      $dom.empty();
      layers = [];
      _ref = this.layers();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        layer = _ref[_i];
        tmp = layer.generateSpec();
        if (!_.isEmpty(tmp)) {
          layers.push(tmp);
        }
      }
      filterSpec = this.filtersView.generateSpec();
      _.each(layers, function(layer) {
        return layer.filter = filterSpec;
      });
      coord = this.advancedPanel.coordView.generateSpec();
      facet = this.advancedPanel.facetView.generateSpec();
      if (layers.length > 0) {
        this.spec = {
          layers: layers,
          coord: coord,
          guide: ((_ref1 = this.params.spec) != null ? _ref1.guide : void 0) || {},
          facet: facet,
          dom: this.chartDom,
          width: w,
          height: h,
          title: this.title()
        };
        spec = $.extend(true, {}, this.spec);
        if (spec.title == null) {
          l = layers[0];
          if ((coord != null ? coord.type : void 0) === 'polar' && (l.color != null)) {
            spec.title = "" + ((_ref2 = l.y) != null ? _ref2["var"] : void 0) + " by " + ((_ref3 = l.color) != null ? _ref3["var"] : void 0);
          } else {
            spec.title = "" + ((_ref4 = l.y) != null ? _ref4["var"] : void 0) + " by " + ((_ref5 = l.x) != null ? _ref5["var"] : void 0);
          }
        }
        try {
          return polyjs.chart(spec);
        } catch (_error) {
          error = _error;
          return TOAST.raise(error.message);
        }
      }
    };

    ChartbuilderView.prototype.initChartDom = function(dom) {
      this.chartDom = $(dom)[0];
      return this.render();
    };

    ChartbuilderView.prototype.removeLayer = function(layer) {
      return this.layers.remove(layer);
    };

    ChartbuilderView.prototype.addLayer = function(spec) {
      var newLayer,
        _this = this;

      newLayer = new LayerView(this.tableMetaData, spec);
      this.layers.push(newLayer);
      return $(newLayer).on(Events.ui.layer.remove.name, function(event, layer) {
        return _this.removeLayer(layer);
      });
    };

    ChartbuilderView.prototype.disableLayerDraggables = function() {
      var _this = this;

      _.each(this.layers(), function(layer) {
        return layer.disable();
      });
      return this.filtersView.disable();
    };

    ChartbuilderView.prototype.enableLayerDraggables = function() {
      var _this = this;

      _.each(this.layers(), function(layer) {
        return layer.enable();
      });
      return this.filtersView.enable();
    };

    return ChartbuilderView;

  })();

  module.exports = ChartbuilderView;

}).call(this);
}, "poly/chart/filters": function(exports, require, module) {// Generated by CoffeeScript 1.6.2
(function() {
  var CONST, DND, DropdownMetricView, Events, Filter, FiltersView, TOAST,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  TOAST = require('poly/error/toast');

  CONST = require('poly/const');

  DND = require('poly/dnd');

  Events = require('events');

  DropdownMetricView = require('poly/data/metric/dropdown');

  FiltersView = (function() {
    function FiltersView(tableMetaData) {
      this.tableMetaData = tableMetaData;
      this.enable = __bind(this.enable, this);
      this.disable = __bind(this.disable, this);
      this.dropFilter = __bind(this.dropFilter, this);
      this.onMetricEnter = __bind(this.onMetricEnter, this);
      this.generateSpec = __bind(this.generateSpec, this);
      this.filters = ko.observableArray();
      this.enabled = ko.observable(true);
    }

    FiltersView.prototype.reset = function(spec, tableName) {
      var _this = this;

      this.filters = ko.observableArray();
      return _.each(spec, function(params, column) {
        var item, meta;

        meta = _this.tableMetaData.metaDataFor(tableName, column);
        item = {
          data: {
            type: meta.type,
            name: column,
            tableName: tableName
          }
        };
        return _this.onMetricEnter(null, item, params);
      });
    };

    FiltersView.prototype.generateSpec = function() {
      var _this = this;

      return _.reduce(this.filters(), function(spec, filter) {
        spec[filter.metric().name] = filter.generateSpec();
        return spec;
      }, {});
    };

    FiltersView.prototype.onMetricEnter = function(event, item, defaults) {
      var f,
        _this = this;

      if (defaults == null) {
        defaults = {};
      }
      f = new Filter(this.tableMetaData, this.filters().length + 1, defaults);
      f.onMetricEnter(event, item);
      this.filters.push(f);
      return $(f).on(Events.ui.filter.remove.name, function() {
        return _this.filters.remove(f);
      });
    };

    FiltersView.prototype.dropFilter = function(dom) {
      var _ref;

      return (_ref = $(dom).data('dnd-data').type) === 'date' || _ref === 'num' || _ref === 'cat';
    };

    FiltersView.prototype.disable = function() {
      return this.enabled(false);
    };

    FiltersView.prototype.enable = function() {
      return this.enabled(true);
    };

    return FiltersView;

  })();

  Filter = (function() {
    function Filter(tableMetaData, id, defaults) {
      var MIL_TO_SEC,
        _this = this;

      this.tableMetaData = tableMetaData;
      this.defaults = defaults != null ? defaults : {};
      this.render = __bind(this.render, this);
      this.initCatFilter = __bind(this.initCatFilter, this);
      this.initSliderFilter = __bind(this.initSliderFilter, this);
      this._makeSlider = __bind(this._makeSlider, this);
      this.dropFilter = __bind(this.dropFilter, this);
      this.onMetricDiscard = __bind(this.onMetricDiscard, this);
      this.onMetricEnter = __bind(this.onMetricEnter, this);
      this.initMetricItem = __bind(this.initMetricItem, this);
      this.generateSpec = __bind(this.generateSpec, this);
      this.createDateOptions = __bind(this.createDateOptions, this);
      MIL_TO_SEC = 1000;
      this.label = "Filter " + id;
      this.metric = ko.observable(false);
      this.metaDone = ko.observable(false);
      this.filterMin = ko.observable(0);
      this.filterMax = ko.observable(10);
      this.filterRange = this.defaults.ge ? ko.observable([this.defaults.ge, this.defaults.le]) : ko.observable(false);
      this.filterDisplay = ko.computed(function() {
        if (_this.metric().type === "date") {
          return (new Date(_this.filterMin() * MIL_TO_SEC)).toString("d MMM yyyy") + ' - ' + (new Date(_this.filterMax() * MIL_TO_SEC)).toString("d MMM yyyy");
        } else {
          return _this.filterMin() + ' - ' + _this.filterMax();
        }
      });
      this.filterCatOptions = ko.observableArray();
      this.filterCatValue = this.defaults["in"] ? ko.observable([this.defaults["in"][0], this.defaults["in"][0]]) : ko.observable(false);
      this.dateOptions = ko.observableArray([]);
      this.dateOptionSelected = ko.observable(["Custom", 0]);
      this.dateOptionSelected.subscribe(function() {
        var bottomDate, sliderDom;

        if (!_this.dateOptionSelected()) {
          $(".date-filter-dropdown", _this.dom).hide();
          return;
        }
        bottomDate = _this.dateOptionSelected()[1];
        sliderDom = $('.selector', _this.dom);
        sliderDom.slider("values", 0, bottomDate);
        return sliderDom.slider("values", 1, _this.filterMax());
      });
      this.removeText = "Remove this Filter";
    }

    Filter.prototype.createDateOptions = function() {
      var MIL_TO_SEC, SEC_PER_DAY, day_ago, month_ago, now, options, year_ago,
        _this = this;

      MIL_TO_SEC = 1000;
      SEC_PER_DAY = 60 * 60 * 24;
      now = Math.floor(new Date().getTime() / MIL_TO_SEC);
      day_ago = Math.floor(now - SEC_PER_DAY);
      month_ago = Math.floor(now - SEC_PER_DAY * 30);
      year_ago = Math.floor(now - SEC_PER_DAY * 365);
      options = [["Custom", 0], ["Past Day", day_ago], ["Past Month", month_ago], ["Past Year", year_ago]];
      return _.reject(options, function(v) {
        return v[1] >= _this.filterMax();
      });
    };

    Filter.prototype.generateSpec = function() {
      var _ref;

      if ((_ref = this.metric().type) === 'date' || _ref === 'num') {
        return {
          le: this.filterMax(),
          ge: this.filterMin()
        };
      } else if (this.metric().type === "cat") {
        if (this.filterCatValue()) {
          return {
            "in": [this.filterCatValue()[1]]
          };
        } else {
          return null;
        }
      }
    };

    Filter.prototype.initMetricItem = function(metricDom, view) {
      DND.makeDraggable(metricDom, view);
      this.metric().attachDropdown(metricDom);
      return this.render();
    };

    Filter.prototype.onMetricEnter = function(event, item) {
      var m,
        _this = this;

      m = new DropdownMetricView(_.extend(item.data, {
        label: this.label
      }), 'tmpl-filter-dropdown', this);
      this.metric(m);
      this.tableMetaData.extendedMetaAsync(m.tableName, m.name, function(err, res) {
        var vals;

        if (err) {
          console.error(err);
          TOAST.raise("Error loading extended meta for table '" + m.tableName + "'");
          return;
        }
        if (_this.metric().type === 'cat') {
          vals = _.map(res.range.values, function(v) {
            return v.toString();
          });
          _.each(_.zip(vals, vals), function(item) {
            return _this.filterCatOptions.push(item);
          });
          _this._maybeChange(_this.filterCatValue, _this.filterCatOptions()[0]);
        } else {
          _this.filterMin(res.range.min);
          _this.filterMax(res.range.max);
          _this._maybeChange(_this.filterRange, [res.range.min, res.range.max]);
          _this.dateOptions(_this.createDateOptions());
        }
        _this.metaDone(true);
        return _this.render();
      });
      return this.removeText = "Remove \"" + this.metric().name + "\" Filter";
    };

    Filter.prototype.onMetricDiscard = function(event, metricDom) {
      this.metric().close();
      $(this).trigger(Events.ui.filter.remove.name);
      return this.render();
    };

    Filter.prototype.dropFilter = function(dom) {
      var _ref;

      return (_ref = $(dom).data('dnd-data').type) === 'date' || _ref === 'num' || _ref === 'cat';
    };

    Filter.prototype._maybeChange = function(obs, maybeVal) {
      if (!obs()) {
        return obs(maybeVal);
      }
    };

    Filter.prototype._updateExtremes = function() {
      this.filterMin(this.filterRange()[0]);
      this.filterMax(this.filterRange()[1]);
      return this.render();
    };

    Filter.prototype._makeSlider = function(slider) {
      var _this = this;

      slider.slider({
        range: true,
        max: this.filterMax(),
        min: this.filterMin(),
        values: [this.filterRange()[0], this.filterRange()[1]],
        slide: function(evt, ui) {
          _this.filterRange(ui.values);
          return _this._updateExtremes();
        }
      });
      return this._updateExtremes();
    };

    Filter.prototype.initSliderFilter = function(dom) {
      var slider,
        _this = this;

      this.dom = dom;
      slider = $('.selector', dom);
      if (this.metaDone()) {
        return this._makeSlider(slider);
      } else {
        return this.metaDone.subscribe(function() {
          return _this._makeSlider(slider);
        });
      }
    };

    Filter.prototype.initCatFilter = function(dom) {
      var _this = this;

      this.dom = dom;
      return this.filterCatValue.subscribe(function() {
        return _this.render();
      });
    };

    Filter.prototype.render = function() {
      return Events.ui.chart.render.trigger();
    };

    return Filter;

  })();

  module.exports = FiltersView;

}).call(this);
}, "poly/chart/layer": function(exports, require, module) {// Generated by CoffeeScript 1.6.2
(function() {
  var Aesthetic, CONST, ColorAesthetic, DEFAULT_TYPE, Events, LayerView, SizeAesthetic,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  CONST = require('poly/const');

  Events = require('events');

  Aesthetic = require('poly/chart/aes/base');

  ColorAesthetic = require('poly/chart/aes/color');

  SizeAesthetic = require('poly/chart/aes/size');

  DEFAULT_TYPE = 'scatter';

  LayerView = (function() {
    function LayerView(tableMetaData, layerspec) {
      var aes, initialType, makeOptionItem, view, _ref,
        _this = this;

      this.tableMetaData = tableMetaData;
      if (layerspec == null) {
        layerspec = {};
      }
      this.enable = __bind(this.enable, this);
      this.disable = __bind(this.disable, this);
      this.removeLayer = __bind(this.removeLayer, this);
      this.generateSpec = __bind(this.generateSpec, this);
      this.sanityCheckMetric = __bind(this.sanityCheckMetric, this);
      initialType = layerspec.type != null ? layerspec.type === 'point' ? 'scatter' : layerspec.type : 'bar';
      this.type = ko.observable(initialType);
      makeOptionItem = function(s) {
        return [s.charAt(0).toUpperCase() + s.slice(1), s];
      };
      this.plotOptionsItem = _.map(_.keys(CONST.layers), makeOptionItem);
      this.plotOptionSelected = ko.observable(makeOptionItem(initialType));
      this.plotOptionSelected.subscribe(function() {
        return _this.type(_this.plotOptionSelected()[1]);
      });
      this.layerRestrictions = ko.computed(function() {
        return CONST.layers[_this.type()];
      });
      this.aesthetics = {
        x: new Aesthetic('x', "X Axis", this),
        y: new Aesthetic('y', "Y Axis", this),
        color: new ColorAesthetic('color', "Color", this),
        size: new SizeAesthetic('size', "Size", this)
      };
      if (layerspec.type === 'bar') {
        this.aesthetics.y.dropFilter = function(dom) {
          var _ref;

          return (_ref = $(dom).data('dnd-data').type) === 'date' || _ref === 'num';
        };
      }
      this.visible = ko.computed(function() {
        return _this.layerRestrictions().visibleAes;
      });
      this.visibleAesthetics = ko.computed(function() {
        var i, _i, _len, _ref, _results;

        _ref = _this.visible();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          _results.push(_this.aesthetics[i]);
        }
        return _results;
      });
      this.attachedMetrics = ko.computed(function() {
        var aesView;

        return _.compact((function() {
          var _i, _len, _ref, _results;

          _ref = this.visibleAesthetics();
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            aesView = _ref[_i];
            _results.push(aesView.metric());
          }
          return _results;
        }).call(_this));
      });
      this.layerspec = ko.observable(layerspec);
      this.data = ko.observable(layerspec.data);
      _ref = this.aesthetics;
      for (aes in _ref) {
        view = _ref[aes];
        view.init(layerspec[aes], layerspec.tableName);
      }
      this.type.subscribe(function() {
        return Events.ui.chart.render.trigger();
      });
    }

    LayerView.prototype.sanityCheckMetric = function(metric) {
      var aes, key, m, _ref;

      _ref = this.aesthetics;
      for (key in _ref) {
        aes = _ref[key];
        m = aes.metric();
        if (m && m.tableName) {
          return m.tableName === metric.tableName;
        }
      }
      return true;
    };

    LayerView.prototype.generateSpec = function() {
      var aesView, layerspec, spec, _i, _len, _ref;

      layerspec = {};
      layerspec.type = this.type() === 'scatter' ? 'point' : this.type();
      _ref = this.visibleAesthetics();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        aesView = _ref[_i];
        spec = aesView.generateSpec();
        if (spec) {
          layerspec[aesView.aes] = spec;
          if (aesView.metric()) {
            layerspec.data = aesView.metric().jsdata;
            layerspec.tableName = aesView.metric().tableName;
          }
        }
      }
      if (layerspec.data) {
        return layerspec;
      } else {
        return {};
      }
    };

    LayerView.prototype.removeLayer = function() {
      return $(this).trigger(Events.ui.layer.remove.name, this);
    };

    LayerView.prototype.disable = function() {
      var _this = this;

      return _.each(this.aesthetics, function(aes) {
        return aes.disable();
      });
    };

    LayerView.prototype.enable = function() {
      var _this = this;

      return _.each(this.aesthetics, function(aes) {
        return aes.enable();
      });
    };

    return LayerView;

  })();

  module.exports = LayerView;

}).call(this);
}, "poly/const": function(exports, require, module) {// Generated by CoffeeScript 1.6.2
(function() {
  var createBasicAes, createBasicLayer, facets, layerNames, layers, n, stats, ui, _i, _len;

  createBasicAes = function() {
    return {
      type: ['num', 'cat', 'date'],
      bin: false,
      stat: {
        cat: ['None', 'Count', 'Unique'],
        num: ['None', 'Sum', 'Average', 'Count', 'Unique', 'Median'],
        date: ['None', 'Count', 'Unique', 'Mean']
      }
    };
  };

  createBasicLayer = function(name) {
    return {
      visibleAes: ['x', 'y', 'color'],
      x: createBasicAes(),
      y: createBasicAes(),
      color: createBasicAes(),
      size: {
        type: ['num'],
        bin: false,
        stat: {
          num: ['None', 'Sum', 'Average', 'Count', 'Unique', 'Median']
        }
      }
    };
  };

  layerNames = ['scatter', 'area', 'line', 'bar', 'tile', 'spline'];

  layers = {};

  for (_i = 0, _len = layerNames.length; _i < _len; _i++) {
    n = layerNames[_i];
    layers[n] = createBasicLayer();
  }

  layers.scatter.visibleAes = ['x', 'y', 'color', 'size'];

  layers.line.visibleAes = ['x', 'y', 'color', 'size'];

  layers.bar.x.stat.num = ['None'];

  layers.bar.x.bin = true;

  layers.bar.y.stat.num = ['None', 'Sum', 'Average', 'Count', 'Unique', 'Median'];

  layers.bar.color.bin = true;

  layers.tile.x.bin = true;

  layers.tile.y.bin = true;

  facets = {
    type: ['num', 'cat', 'date'],
    bin: true,
    stat: {
      cat: ['None'],
      num: ['None'],
      date: ['None']
    }
  };

  stats = {};

  stats.nameToStat = {
    'Count': 'count',
    'Unique': 'unique',
    'Sum': 'sum',
    'Average': 'mean',
    'Median': 'median'
  };

  stats.statToName = _.invert(stats.nameToStat);

  ui = {
    grid_width: 12,
    min_grid_size: 40
  };

  module.exports = {
    layers: layers,
    facets: facets,
    stats: stats,
    ui: ui
  };

}).call(this);
}, "poly/dash/aes": function(exports, require, module) {// Generated by CoffeeScript 1.6.2
(function() {
  var CONST, DND, Events, QuickAddAesthetic, QuickAddMetricView, TOAST,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  CONST = require('poly/const');

  Events = require('events');

  QuickAddMetricView = require('poly/data/metric/quickadd');

  DND = require('poly/dnd');

  TOAST = require('poly/error/toast');

  QuickAddAesthetic = (function() {
    function QuickAddAesthetic(parent, aes, options, tableMetaData) {
      this.parent = parent;
      this.aes = aes;
      this.options = options;
      this.tableMetaData = tableMetaData;
      this.enable = __bind(this.enable, this);
      this.disable = __bind(this.disable, this);
      this.initMetricItem = __bind(this.initMetricItem, this);
      this.onDiscard = __bind(this.onDiscard, this);
      this.onEnter = __bind(this.onEnter, this);
      this.clear = __bind(this.clear, this);
      this.metric = ko.observable();
      this.metric.subscribe(this.parent.addItem);
      this.enabled = ko.observable(false);
    }

    QuickAddAesthetic.prototype.clear = function() {
      this.metric(null);
      return this.enable();
    };

    QuickAddAesthetic.prototype.onEnter = function(event, item) {
      if (!this.enabled()) {
        return;
      }
      if (this.metric()) {
        this.metric().close();
      }
      if (this.parent._sanityCheckMetrics(item.data)) {
        this.metric(new QuickAddMetricView(this.tableMetaData, item.data, this.options, this.aes));
        $(this.metric()).on(Events.ui.metric.remove.name, this.onDiscard);
        return this.parent._recalculateExpansion(event.target);
      } else {
        return TOAST.raise("Both data columns must be from the same table!");
      }
    };

    QuickAddAesthetic.prototype.onDiscard = function(event, metricItem) {
      this.metric().close();
      this.clear();
      return this.parent._recalculateExpansion(event.target);
    };

    QuickAddAesthetic.prototype.initMetricItem = function(dom, quickAddMetricView) {
      DND.makeDraggable(dom, quickAddMetricView);
      return quickAddMetricView.attachDropdown(dom);
    };

    QuickAddAesthetic.prototype.disable = function() {
      return this.enabled(false);
    };

    QuickAddAesthetic.prototype.enable = function() {
      return this.enabled(true);
    };

    QuickAddAesthetic.prototype.dropFilter = function() {
      return true;
    };

    return QuickAddAesthetic;

  })();

  module.exports = QuickAddAesthetic;

}).call(this);
}, "poly/dash/dashboard": function(exports, require, module) {// Generated by CoffeeScript 1.6.2
(function() {
  var DashboardView, QuickAddView, WorkspaceView,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  QuickAddView = require('poly/dash/quickadd');

  WorkspaceView = require('poly/dash/workspace');

  DashboardView = (function() {
    function DashboardView(initial, tableMetaData) {
      this.serialize = __bind(this.serialize, this);      this.workspaceView = new WorkspaceView(initial, tableMetaData);
      this.quickaddView = new QuickAddView(tableMetaData);
    }

    DashboardView.prototype.serialize = function() {
      return this.workspaceView.serialize();
    };

    return DashboardView;

  })();

  module.exports = DashboardView;

}).call(this);
}, "poly/dash/item/base": function(exports, require, module) {// Generated by CoffeeScript 1.6.2
(function() {
  var Animation, CONST, DashItem, Events,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  CONST = require('poly/const');

  Animation = require('poly/anim');

  Events = require('events');

  DashItem = (function() {
    function DashItem(position) {
      var _ref, _ref1, _ref2, _ref3;

      if (position == null) {
        position = {};
      }
      this.deserialize = __bind(this.deserialize, this);
      this.serialize = __bind(this.serialize, this);
      this.setPosition = __bind(this.setPosition, this);
      this.getPosition = __bind(this.getPosition, this);
      this.getTop = __bind(this.getTop, this);
      this.getLeft = __bind(this.getLeft, this);
      this.getHeight = __bind(this.getHeight, this);
      this.getWidth = __bind(this.getWidth, this);
      this.onResize = __bind(this.onResize, this);
      this.setGridSize = __bind(this.setGridSize, this);
      this.loaded = __bind(this.loaded, this);
      this.init = __bind(this.init, this);
      if (!this.templateName) {
        throw "DashItem must have a template name before super constructor is called";
      }
      this.gridWidth = (_ref = position.width) != null ? _ref : 6;
      this.gridHeight = (_ref1 = position.height) != null ? _ref1 : 4;
      this.gridTop = (_ref2 = position.top) != null ? _ref2 : 0;
      this.gridLeft = (_ref3 = position.left) != null ? _ref3 : 0;
      this.gridSize = 0;
      this.isViewer = ko.observable(false);
    }

    DashItem.prototype.init = function(dom) {
      this.dom = dom;
      return this.loadingAnim = new Animation('loading', this.dom);
    };

    DashItem.prototype.loaded = function() {
      return this.loadingAnim.remove();
    };

    DashItem.prototype.setGridSize = function(gridSize, viewer) {
      var $dom,
        _this = this;

      this.gridSize = gridSize;
      if (!viewer && !this.isViewer()) {
        $dom = $(this.dom);
        $dom.draggable({
          grid: [this.gridSize, this.gridSize],
          stop: function() {
            var left, top;

            top = parseInt($dom.css('top'));
            left = parseInt($dom.css('left'));
            _this.gridTop = Math.ceil(top / _this.gridSize);
            _this.gridLeft = Math.ceil(left / _this.gridSize);
            return _this.onResize();
          }
        });
        $dom.resizable({
          grid: this.gridSize,
          stop: function() {
            _this.gridWidth = Math.ceil($dom.width() / _this.gridSize);
            _this.gridHeight = Math.ceil($dom.height() / _this.gridSize);
            $dom.width(_this.getWidth());
            $dom.height(_this.getHeight());
            return _this.onResize();
          },
          minHeight: this.gridSize,
          minWidth: this.gridSize
        });
      }
      return this.onResize(true);
    };

    DashItem.prototype.onResize = function(isDeserializing) {
      var $dom;

      if (isDeserializing == null) {
        isDeserializing = false;
      }
      $dom = $(this.dom);
      $dom.css('left', this.getLeft());
      $dom.css('top', this.getTop());
      $dom.width(this.getWidth());
      $dom.height(this.getHeight());
      if (!isDeserializing) {
        return Events.model.dashboarditem.update.trigger();
      }
    };

    DashItem.prototype.getWidth = function() {
      return this.gridWidth * this.gridSize;
    };

    DashItem.prototype.getHeight = function() {
      return this.gridHeight * this.gridSize;
    };

    DashItem.prototype.getLeft = function() {
      return this.gridLeft * this.gridSize;
    };

    DashItem.prototype.getTop = function() {
      return this.gridTop * this.gridSize;
    };

    DashItem.prototype.getPosition = function() {
      return {
        top: this.gridTop,
        left: this.gridLeft,
        width: this.gridWidth,
        height: this.gridHeight
      };
    };

    DashItem.prototype.setPosition = function(pos) {
      this.gridTop = pos.top;
      this.gridLeft = pos.left;
      this.gridWidth = pos.width;
      return this.gridHeight = pos.height;
    };

    DashItem.prototype.serialize = function(s) {
      if (!s.itemType) {
        throw new Error('DashItem subclass must specify itemType');
      }
      s.position = this.getPosition();
      return s;
    };

    DashItem.prototype.deserialize = function(s) {
      if (s.position) {
        return this.setPosition(s.position);
      }
    };

    return DashItem;

  })();

  module.exports = DashItem;

}).call(this);
}, "poly/dash/item/chart": function(exports, require, module) {// Generated by CoffeeScript 1.6.2
(function() {
  var CONST, ChartItem, DashItem, Events, PADDING, TOAST,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  CONST = require('poly/const');

  TOAST = require('poly/error/toast');

  Events = require('events');

  DashItem = require('poly/dash/item/base');

  PADDING = 10;

  ChartItem = (function(_super) {
    __extends(ChartItem, _super);

    function ChartItem(spec, position) {
      var _ref, _ref1;

      this.spec = spec != null ? spec : null;
      if (position == null) {
        position = {};
      }
      this.deserialize = __bind(this.deserialize, this);
      this.serialize = __bind(this.serialize, this);
      this.editChart = __bind(this.editChart, this);
      this.deleteChart = __bind(this.deleteChart, this);
      this.disableDetails = __bind(this.disableDetails, this);
      this.enableDetails = __bind(this.enableDetails, this);
      this._makeChart = __bind(this._makeChart, this);
      this.setSpec = __bind(this.setSpec, this);
      this.onResize = __bind(this.onResize, this);
      this.init = __bind(this.init, this);
      position.width = (_ref = position.width) != null ? _ref : 6;
      position.width = Math.max(Math.min(position.width, 12), 1);
      position.height = (_ref1 = position.height) != null ? _ref1 : 4;
      position.height = Math.max(position.height, 1);
      this.showDetails = ko.observable(false);
      this.makeChart = _.debounce(this._makeChart, 10, true);
      if (!this.templateName) {
        this.templateName = 'tmpl-chart-item';
      }
      ChartItem.__super__.constructor.call(this, position);
    }

    ChartItem.prototype.init = function(dom) {
      var layer, _base, _base1, _base2, _base3, _i, _len, _ref, _ref1, _ref2, _ref3, _ref4,
        _this = this;

      this.dom = dom;
      ChartItem.__super__.init.call(this, dom);
      this.chartdom = $('.chart-inner', dom);
      this.spec.dom = this.chartdom[0];
      if ((_ref = (_base = this.spec).paddingLeft) == null) {
        _base.paddingLeft = 0;
      }
      if ((_ref1 = (_base1 = this.spec).paddingRight) == null) {
        _base1.paddingRight = 0;
      }
      if ((_ref2 = (_base2 = this.spec).paddingTop) == null) {
        _base2.paddingTop = 0;
      }
      if ((_ref3 = (_base3 = this.spec).paddingBottom) == null) {
        _base3.paddingBottom = 0;
      }
      if (this.spec.layer) {
        this.spec.layers = [this.spec.layer];
        delete this.spec.layer;
      }
      _ref4 = this.spec.layers;
      for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
        layer = _ref4[_i];
        if (!layer.data && layer.tableName) {
          layer.data = this.tableMetaData.polyJSObjectFor(layer.tableName);
        }
      }
      return Events.error.polyjs.data.on(function(event) {
        return _this.loadingAnim.stopOnImage('assets/broken_chart.svg');
      });
    };

    ChartItem.prototype.onResize = function(isDeserializing) {
      if (isDeserializing == null) {
        isDeserializing = false;
      }
      this.makeChart();
      return ChartItem.__super__.onResize.call(this, isDeserializing);
    };

    ChartItem.prototype.setSpec = function(spec, isDeserializing) {
      if (isDeserializing == null) {
        isDeserializing = false;
      }
      this.spec = spec;
      if (!isDeserializing) {
        return Events.model.dashboarditem.update.trigger();
      }
    };

    ChartItem.prototype._makeChart = function() {
      var err, l, spec, _ref, _ref1, _ref2, _ref3, _ref4,
        _this = this;

      if (!this.gridSize) {
        throw "Can't make chart without valid grid size";
      }
      if (!this.chartdom) {
        throw "Can't make chart before init() is called!";
      }
      this.spec.width = this.getWidth() - PADDING;
      this.spec.height = this.getHeight() - PADDING;
      spec = $.extend(true, {}, this.spec);
      if (spec.title == null) {
        l = spec.layers[0];
        if (((_ref = spec.coord) != null ? _ref.type : void 0) === 'polar' && (l.color != null)) {
          spec.title = "" + ((_ref1 = l.y) != null ? _ref1["var"] : void 0) + " by " + ((_ref2 = l.color) != null ? _ref2["var"] : void 0);
        } else {
          spec.title = "" + ((_ref3 = l.y) != null ? _ref3["var"] : void 0) + " by " + ((_ref4 = l.x) != null ? _ref4["var"] : void 0);
        }
      }
      try {
        return this.chart = polyjs.chart(spec, this.loaded, function() {
          return _this.chartdom.empty();
        });
      } catch (_error) {
        err = _error;
        TOAST.raise(err.message);
        return this.loadingAnim.stopOnImage('assets/broken_chart.svg');
      }
    };

    ChartItem.prototype.enableDetails = function() {
      return this.showDetails(true);
    };

    ChartItem.prototype.disableDetails = function() {
      return this.showDetails(false);
    };

    ChartItem.prototype.deleteChart = function() {
      return Events.ui.chart.remove.trigger(this);
    };

    ChartItem.prototype.editChart = function() {
      Events.ui.chart.edit.trigger();
      return Events.nav.chartbuilder.open.trigger({
        spec: this.spec,
        chartView: this
      });
    };

    ChartItem.prototype.serialize = function(s) {
      var layers, spec, _i, _len, _ref;

      if (s == null) {
        s = {};
      }
      spec = $.extend(true, s, this.spec);
      delete spec.dom;
      delete spec.data;
      if (spec.layer) {
        delete spec.layer.data;
      }
      if (spec.layers) {
        _ref = spec.layers;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          layers = _ref[_i];
          delete layers.data;
        }
      }
      return ChartItem.__super__.serialize.call(this, {
        itemType: 'ChartItem',
        spec: spec
      });
    };

    ChartItem.prototype.deserialize = function(s) {
      this.setSpec(s.spec, true);
      return ChartItem.__super__.deserialize.call(this, s);
    };

    return ChartItem;

  })(DashItem);

  module.exports = ChartItem;

}).call(this);
}, "poly/dash/item/comment": function(exports, require, module) {// Generated by CoffeeScript 1.6.2
(function() {
  var CONST, CommentItem, TextItem,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  CONST = require('poly/const');

  TextItem = require('poly/dash/item/text');

  CommentItem = (function(_super) {
    __extends(CommentItem, _super);

    function CommentItem(author, value, position) {
      var _ref, _ref1, _ref2;

      this.author = author != null ? author : null;
      if (value == null) {
        value = "Write a comment here...";
      }
      if (position == null) {
        position = {};
      }
      this.deserialize = __bind(this.deserialize, this);
      this.serialize = __bind(this.serialize, this);
      this.author = (_ref = this.author) != null ? _ref : "owner";
      position.width = (_ref1 = position.width) != null ? _ref1 : 2;
      position.height = (_ref2 = position.height) != null ? _ref2 : 2;
      if (!this.templateName) {
        this.templateName = 'tmpl-comment-item';
      }
      CommentItem.__super__.constructor.call(this, value, position);
    }

    CommentItem.prototype.serialize = function(s) {
      if (s == null) {
        s = {};
      }
      s.author = this.author;
      s.itemType = "CommentItem";
      return CommentItem.__super__.serialize.call(this, s);
    };

    CommentItem.prototype.deserialize = function(s) {
      if (s.author) {
        this.author = s.author;
      }
      return CommentItem.__super__.deserialize.call(this, s);
    };

    return CommentItem;

  })(TextItem);

  module.exports = CommentItem;

}).call(this);
}, "poly/dash/item/text": function(exports, require, module) {// Generated by CoffeeScript 1.6.2
(function() {
  var CONST, DashItem, TextItem,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  CONST = require('poly/const');

  DashItem = require('poly/dash/item/base');

  TextItem = (function(_super) {
    __extends(TextItem, _super);

    function TextItem(value, position) {
      var _ref, _ref1;

      if (value == null) {
        value = "Untitled Dashboard";
      }
      if (position == null) {
        position = {};
      }
      this.deserialize = __bind(this.deserialize, this);
      this.serialize = __bind(this.serialize, this);
      this.editContent = __bind(this.editContent, this);
      this.init = __bind(this.init, this);
      position.width = (_ref = position.width) != null ? _ref : 4;
      position.height = (_ref1 = position.height) != null ? _ref1 : 1;
      this.textContent = ko.observable(value);
      if (!this.templateName) {
        this.templateName = 'tmpl-text-item';
      }
      TextItem.__super__.constructor.call(this, position);
    }

    TextItem.prototype.init = function(dom) {
      this.dom = dom;
      TextItem.__super__.init.call(this, dom);
      return this.loaded();
    };

    TextItem.prototype.editContent = function() {
      this.textContent("");
      return $(".content", this.dom).focus();
    };

    TextItem.prototype.serialize = function(s) {
      var _ref;

      if (s == null) {
        s = {};
      }
      s.itemType = (_ref = s.itemType) != null ? _ref : 'TextItem';
      s.textContent = this.textContent();
      return TextItem.__super__.serialize.call(this, s);
    };

    TextItem.prototype.deserialize = function(s) {
      if (s.textContent) {
        this.textContent(s.textContent);
      }
      return TextItem.__super__.deserialize.call(this, s);
    };

    return TextItem;

  })(DashItem);

  module.exports = TextItem;

}).call(this);
}, "poly/dash/quickadd": function(exports, require, module) {// Generated by CoffeeScript 1.6.2
(function() {
  var CONST, Events, QuickAddAesthetic, QuickAddBarItemView, QuickAddCommentView, QuickAddItemView, QuickAddLineItemView, QuickAddPieItemView, QuickAddView, TOAST, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  CONST = require('poly/const');

  TOAST = require('poly/error/toast');

  Events = require('events');

  QuickAddAesthetic = require('poly/dash/aes');

  QuickAddView = (function() {
    function QuickAddView(tableMetaData) {
      this.newCustomChart = __bind(this.newCustomChart, this);
      this.clearOther = __bind(this.clearOther, this);      this.lineView = new QuickAddLineItemView({
        name: 'Line Chart',
        img: 'line',
        aes1: 'X Axis',
        aes2: 'Y Axis',
        tableMetaData: tableMetaData
      });
      $(this.lineView).on(Events.ui.quickadd.expand.name, this.clearOther);
      this.barView = new QuickAddBarItemView({
        name: 'Bar Chart',
        img: 'bar',
        aes1: 'X Axis',
        aes2: 'Y Axis',
        tableMetaData: tableMetaData
      });
      $(this.barView).on(Events.ui.quickadd.expand.name, this.clearOther);
      this.pieView = new QuickAddPieItemView({
        name: 'Pie Chart',
        img: 'pie',
        aes1: 'Categories',
        aes2: 'Values',
        tableMetaData: tableMetaData
      });
      $(this.pieView).on(Events.ui.quickadd.expand.name, this.clearOther);
      this.commentView = new QuickAddCommentView({
        name: 'Annotation',
        img: 'annotation'
      });
    }

    QuickAddView.prototype.clearOther = function(event, current) {
      var item, _i, _len, _ref, _results;

      _ref = [this.lineView, this.barView, this.pieView];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        if (item !== current) {
          _results.push(item.expanded(false));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    QuickAddView.prototype.initQuickAddItem = function(domElements, view) {
      return view.afterRender(domElements[0]);
    };

    QuickAddView.prototype.newCustomChart = function() {
      Events.ui.quickadd.click.trigger({
        info: {
          name: "Custom"
        }
      });
      return Events.nav.chartbuilder.open.trigger();
    };

    return QuickAddView;

  })();

  QuickAddItemView = (function() {
    function QuickAddItemView(params) {
      this._showError = __bind(this._showError, this);
      this._sanityCheckMetrics = __bind(this._sanityCheckMetrics, this);
      this.toggleExpand = __bind(this.toggleExpand, this);
      this._addItem = __bind(this._addItem, this);
      this.addItem = __bind(this.addItem, this);
      var tableMetaData,
        _this = this;

      this.name = params.name, this.img = params.img, this.aes1 = params.aes1, this.aes2 = params.aes2, tableMetaData = params.tableMetaData;
      this.imageClass = "large-icon img-icon-" + this.img;
      this.successIndicatorVisible = ko.observable(false);
      this.expanded = ko.observable(false);
      this.expanded.subscribe(function(isExpanded) {
        if (isExpanded) {
          Events.ui.quickadd.expand.trigger({
            info: {
              name: _this.name
            }
          });
          _this.metricView1.clear();
          _this.metricView2.clear();
        }
        if (!isExpanded) {
          Events.ui.quickadd.collapse.trigger({
            info: {
              name: _this.name
            }
          });
          _this.metricView1.disable();
          _this.metricView2.disable();
          return setTimeout(function() {
            return _this.successIndicatorVisible(false);
          }, 500);
        }
      });
      this.metricView1 = new QuickAddAesthetic(this, this.aes1, this.options1, tableMetaData);
      this.metricView2 = new QuickAddAesthetic(this, this.aes2, this.options2, tableMetaData);
      this.maxHeight = ko.observable(0);
      this.renderHeight = ko.computed(function() {
        if (_this.expanded()) {
          return _this.maxHeight();
        } else {
          return 0;
        }
      });
    }

    QuickAddItemView.prototype.addItem = function() {
      var _this = this;

      if (this.metricView1.metric() && this.metricView2.metric()) {
        this._addItem();
        this.successIndicatorVisible(true);
        Events.ui.dropdown.disable.trigger();
        this.metricView1.disable();
        this.metricView2.disable();
        return setTimeout(function() {
          _this.expanded(false);
          return Events.ui.dropdown.enable.trigger();
        }, 2000);
      }
    };

    QuickAddItemView.prototype._addItem = function() {
      return Events.ui.chart.add.trigger({
        spec: null
      });
    };

    QuickAddItemView.prototype._recalculateExpansion = function(domElementInView) {
      var expansion;

      if ($(domElementInView).hasClass('quickadd-container')) {
        expansion = $(domElementInView).find('.expansion');
      } else {
        expansion = $(domElementInView).parents('.quickadd-container').find('.expansion');
      }
      return this.maxHeight(expansion.children().outerHeight());
    };

    QuickAddItemView.prototype.toggleExpand = function(view, event) {
      this.expanded(!this.expanded());
      $(this).trigger(Events.ui.quickadd.expand.name, this);
      return this._recalculateExpansion(event.target);
    };

    QuickAddItemView.prototype._sanityCheckMetrics = function(newMetric) {
      var metric, _ref;

      metric = (_ref = this.metricView1.metric()) != null ? _ref : this.metricView2.metric();
      if (metric && newMetric && (metric.tableName !== newMetric.tableName)) {
        return false;
      } else {
        return true;
      }
    };

    QuickAddItemView.prototype._showError = function(msg) {
      return alert(msg);
    };

    return QuickAddItemView;

  })();

  QuickAddLineItemView = (function(_super) {
    __extends(QuickAddLineItemView, _super);

    function QuickAddLineItemView() {
      this._addItem = __bind(this._addItem, this);
      this.options2 = __bind(this.options2, this);
      this.options1 = __bind(this.options1, this);      _ref = QuickAddLineItemView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    QuickAddLineItemView.prototype.options1 = function() {
      return CONST.layers.line.x;
    };

    QuickAddLineItemView.prototype.options2 = function() {
      return CONST.layers.line.y;
    };

    QuickAddLineItemView.prototype._addItem = function() {
      var x, y;

      x = this.metricView1.metric();
      y = this.metricView2.metric();
      if (x.name === y.name) {
        y.stat('Count');
      }
      return Events.ui.chart.add.trigger({
        spec: {
          layer: {
            tableName: x.tableName,
            data: x.jsdata,
            type: 'line',
            x: x.generateSpec(),
            y: y.generateSpec()
          }
        }
      });
    };

    return QuickAddLineItemView;

  })(QuickAddItemView);

  QuickAddBarItemView = (function(_super) {
    __extends(QuickAddBarItemView, _super);

    function QuickAddBarItemView(params) {
      this._addItem = __bind(this._addItem, this);
      this.options2 = __bind(this.options2, this);
      this.options1 = __bind(this.options1, this);      QuickAddBarItemView.__super__.constructor.call(this, params);
      this.metricView2.dropFilter = function(dom) {
        var _ref1;

        return (_ref1 = $(dom).data('dnd-data').type) === 'date' || _ref1 === 'num';
      };
    }

    QuickAddBarItemView.prototype.options1 = function() {
      return CONST.layers.bar.x;
    };

    QuickAddBarItemView.prototype.options2 = function() {
      return CONST.layers.bar.y;
    };

    QuickAddBarItemView.prototype._addItem = function() {
      var x, y;

      x = this.metricView1.metric();
      y = this.metricView2.metric();
      if (x.name === y.name) {
        y.stats('Count');
      }
      return Events.ui.chart.add.trigger({
        spec: {
          layer: {
            tableName: x.tableName,
            data: x.jsdata,
            type: 'bar',
            x: x.generateSpec(),
            y: y.generateSpec()
          }
        }
      });
    };

    return QuickAddBarItemView;

  })(QuickAddItemView);

  QuickAddPieItemView = (function(_super) {
    __extends(QuickAddPieItemView, _super);

    function QuickAddPieItemView(params) {
      this._addItem = __bind(this._addItem, this);
      this.options2 = __bind(this.options2, this);
      this.options1 = __bind(this.options1, this);      QuickAddPieItemView.__super__.constructor.call(this, params);
      this.metricView2.dropFilter = function(dom) {
        var _ref1;

        return (_ref1 = $(dom).data('dnd-data').type) === 'date' || _ref1 === 'num';
      };
    }

    QuickAddPieItemView.prototype.options1 = function() {
      return CONST.layers.bar.color;
    };

    QuickAddPieItemView.prototype.options2 = function() {
      return CONST.layers.bar.y;
    };

    QuickAddPieItemView.prototype._addItem = function() {
      var col, y;

      col = this.metricView1.metric();
      y = this.metricView2.metric();
      if (col.name === y.name) {
        y.stats('Count');
      }
      return Events.ui.chart.add.trigger({
        spec: {
          layer: {
            tableName: col.tableName,
            data: col.jsdata,
            type: 'bar',
            color: col.generateSpec(),
            y: y.generateSpec()
          },
          coord: {
            type: 'polar'
          },
          guide: {
            x: {
              position: 'none',
              padding: 0
            },
            y: {
              position: 'none',
              padding: 0
            }
          }
        }
      });
    };

    return QuickAddPieItemView;

  })(QuickAddItemView);

  QuickAddCommentView = (function() {
    function QuickAddCommentView() {
      this.addItem = __bind(this.addItem, this);      this.name = "Annotation";
      this.imageClass = "large-icon img-icon-annotation";
    }

    QuickAddCommentView.prototype.addItem = function() {
      return Events.ui.quickadd.add.trigger({
        itemType: "CommentItem"
      });
    };

    return QuickAddCommentView;

  })();

  module.exports = QuickAddView;

}).call(this);
}, "poly/dash/workspace": function(exports, require, module) {// Generated by CoffeeScript 1.6.2
(function() {
  var CONST, ChartItem, CommentItem, Events, ItemFactory, TextItem, WorkspaceView,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  CONST = require('poly/const');

  Events = require('events');

  ChartItem = require('poly/dash/item/chart');

  TextItem = require('poly/dash/item/text');

  CommentItem = require('poly/dash/item/comment');

  WorkspaceView = (function() {
    function WorkspaceView(initial, tableMetaData, viewer) {
      var _this = this;

      this.initial = initial;
      this.tableMetaData = tableMetaData;
      if (viewer == null) {
        viewer = false;
      }
      this.setItemGridSizes = __bind(this.setItemGridSizes, this);
      this.calculateGridSize = __bind(this.calculateGridSize, this);
      this.onResize = __bind(this.onResize, this);
      this.removeItem = __bind(this.removeItem, this);
      this.addItem = __bind(this.addItem, this);
      this.serialize = __bind(this.serialize, this);
      this.populateEmptyWorkspace = __bind(this.populateEmptyWorkspace, this);
      this.init = __bind(this.init, this);
      this.items = ko.observableArray();
      this.gridSize = 0;
      this.isViewer = ko.observable(viewer);
      if (_.isEmpty(this.initial)) {
        this.populateEmptyWorkspace();
      }
      _.each(this.initial, function(s) {
        return _.defer(function() {
          return _this.addItem(ItemFactory.makeItem(s, _this.tableMetaData, viewer), true);
        });
      });
      Events.ui.chart.add.on(function(event, params) {
        params.itemType = "ChartItem";
        return _.defer(function() {
          return _this.addItem(ItemFactory.makeItem(params, _this.tableMetaData, viewer));
        });
      });
      Events.ui.quickadd.add.on(function(event, params) {
        return _.defer(function() {
          return _this.addItem(ItemFactory.makeItem(params, _this.tableMetaData, viewer));
        });
      });
      Events.ui.chart.remove.on(function(event, chartView) {
        return _this.removeItem(chartView);
      });
    }

    WorkspaceView.prototype.init = function(dom) {
      this.dom = dom;
      $(window).resize(_.throttle(this.onResize, 1000));
      this.calculateGridSize();
      return this.setItemGridSizes();
    };

    WorkspaceView.prototype.populateEmptyWorkspace = function() {
      return this.addItem(new TextItem());
    };

    WorkspaceView.prototype.serialize = function() {
      var foo, item, serial, _i, _len, _ref;

      foo = [];
      _ref = this.items();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        serial = item.serialize();
        if (serial != null) {
          foo.push(serial);
        }
      }
      return foo;
    };

    WorkspaceView.prototype.addItem = function(item, isDeserializing) {
      if (isDeserializing == null) {
        isDeserializing = false;
      }
      this.items.push(item);
      item.setGridSize(this.gridSize, this.isViewer());
      if (!isDeserializing) {
        return Events.model.dashboarditem.create.trigger();
      }
    };

    WorkspaceView.prototype.removeItem = function(item) {
      this.items.remove(item);
      return Events.model.dashboarditem["delete"].trigger();
    };

    WorkspaceView.prototype.onResize = function(event) {
      if (event.target !== window) {
        return;
      }
      this.calculateGridSize();
      return this.setItemGridSizes();
    };

    WorkspaceView.prototype.calculateGridSize = function() {
      this.gridSize = Math.round($(".workspace-panel", this.dom).width() / CONST.ui.grid_width);
      this.gridSize = Math.max(this.gridSize, CONST.ui.min_grid_size);
      return $(".workspace-items", this.dom).css("background-size", this.gridSize);
    };

    WorkspaceView.prototype.setItemGridSizes = function() {
      var $dom,
        _this = this;

      $dom = $(this.dom);
      return _.each(this.items(), function(item) {
        item.setGridSize(_this.gridSize, _this.isViewer());
        return item.onResize();
      });
    };

    return WorkspaceView;

  })();

  ItemFactory = (function() {
    function ItemFactory() {}

    ItemFactory.ChartItem = ChartItem;

    ItemFactory.TextItem = TextItem;

    ItemFactory.CommentItem = CommentItem;

    ItemFactory.makeItem = function(serial, tableMetaData, viewer) {
      var view;

      if (!serial.itemType) {
        throw "Need to specify item type!";
      }
      view = new ItemFactory[serial.itemType]();
      view.deserialize(serial);
      view.tableMetaData = tableMetaData;
      view.isViewer(viewer);
      return view;
    };

    return ItemFactory;

  }).call(this);

  module.exports = WorkspaceView;

}).call(this);
}, "poly/data/dataSource": function(exports, require, module) {// Generated by CoffeeScript 1.6.2
(function() {
  var DataSource, Events, LocalDataSource, RemoteDataSource, TOAST, serverApi,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  TOAST = require('poly/error/toast');

  Events = require('events');

  serverApi = require('poly/serverApi');

  DataSource = (function() {
    function DataSource() {
      throw new Error('DataSource is abstract');
    }

    DataSource.prototype.listTables = function(callback) {
      throw new Error('DataSource is abstract');
    };

    DataSource.prototype.createPolyJsData = function(tableName) {
      throw new Error('DataSource is abstract');
    };

    DataSource.prototype.getRange = function(tableName, columnName, type, callback) {
      throw new Error('DataSource is abstract');
    };

    return DataSource;

  })();

  LocalDataSource = (function(_super) {
    __extends(LocalDataSource, _super);

    function LocalDataSource(tables) {
      var table, _i, _len;

      this._localData = tables;
      this._tableList = {};
      for (_i = 0, _len = tables.length; _i < _len; _i++) {
        table = tables[_i];
        this._tableList[table.name] = {
          name: table.name,
          meta: table.meta,
          jsdata: polyjs.data(table)
        };
      }
    }

    LocalDataSource.prototype.listTables = function(callback) {
      return callback(null, this._tableList);
    };

    LocalDataSource.prototype.createPolyJsData = function(tableName) {
      return this._tableList[tableName].jsdata;
    };

    LocalDataSource.prototype.getRange = function(tableName, columnName, type, callback) {
      var column, data, meta, name, range, _i, _len, _ref, _ref1;

      column = null;
      _ref = this._localData;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        _ref1 = _ref[_i], name = _ref1.name, meta = _ref1.meta, data = _ref1.data;
        if (name === tableName) {
          column = _.pluck(data, columnName);
        }
      }
      range = type === 'cat' ? {
        values: _.uniq(column)
      } : {
        min: _.min(column),
        max: _.max(column)
      };
      return callback(null, range);
    };

    return LocalDataSource;

  })(DataSource);

  RemoteDataSource = (function(_super) {
    __extends(RemoteDataSource, _super);

    function RemoteDataSource(dataSourceKey) {
      this._dataSourceKey = dataSourceKey;
    }

    RemoteDataSource.prototype.listTables = function(callback) {
      var _this = this;

      return serverApi.sendGet("/data-source/" + (encodeURIComponent(this._dataSourceKey)) + "/tables/list", {}, function(err, tables) {
        var result, table, _i, _len;

        if (err) {
          callback(err, null);
          return;
        }
        result = {};
        for (_i = 0, _len = tables.length; _i < _len; _i++) {
          table = tables[_i];
          result[table.name] = table;
          result[table.name].jsdata = _this.createPolyJsData(table.name);
        }
        return callback(null, result);
      });
    };

    RemoteDataSource.prototype.createPolyJsData = function(tableName) {
      var _this = this;

      return polyjs.data.api(function(requestParams, callback) {
        return serverApi.sendGet("/data-source/" + (encodeURIComponent(_this._dataSourceKey)) + "/tables/" + (encodeURIComponent(tableName)) + "/query", {
          spec: JSON.stringify(requestParams)
        }, function(err, res) {
          if (err) {
            callback(err, null);
            return;
          }
          try {
            return callback(null, res);
          } catch (_error) {
            err = _error;
            Events.error.polyjs.data.trigger();
            throw err;
          }
        });
      });
    };

    RemoteDataSource.prototype.getRange = function(tableName, columnName, dataType, callback) {
      return serverApi.sendGet("/data-source/" + (encodeURIComponent(this._dataSourceKey)) + "/tables/" + (encodeURIComponent(tableName)) + "/meta", {
        columnName: columnName,
        type: dataType
      }, function(err, meta) {
        if (err) {
          callback(err, null);
          return;
        }
        return callback(null, meta);
      });
    };

    return RemoteDataSource;

  })(DataSource);

  module.exports = {
    LocalDataSource: LocalDataSource,
    RemoteDataSource: RemoteDataSource
  };

}).call(this);
}, "poly/data/dataView": function(exports, require, module) {// Generated by CoffeeScript 1.6.2
(function() {
  var DataView, Events, TOAST, TableMetricListView,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice;

  TOAST = require('poly/error/toast');

  TableMetricListView = require('poly/data/tableView');

  Events = require('events');

  DataView = (function() {
    function DataView(dataSource) {
      var _this = this;

      this.dataSource = dataSource;
      this.getMetaData = __bind(this.getMetaData, this);
      this.getExtendedMetaAsync = __bind(this.getExtendedMetaAsync, this);
      this.getTableMetaData = __bind(this.getTableMetaData, this);
      this.tableData = ko.observable();
      this.dataSource.listTables(function(err, result) {
        if (err) {
          console.error(err);
          TOAST.raise("An error occurred while listing tables");
          return;
        }
        return _this.tableData(result);
      });
      this.visibleTables = ko.computed(function() {
        var k, result, table, tableData;

        tableData = _this.tableData();
        if (_.size(tableData)) {
          result = (function() {
            var _ref, _results;

            _ref = tableData || {};
            _results = [];
            for (k in _ref) {
              table = _ref[k];
              _results.push(new TableMetricListView(table, this));
            }
            return _results;
          }).call(_this);
          result[0].selected(true);
          return result;
        }
        return [];
      });
      Events.ui.table.focus.on(function(evt, info) {
        var name;

        name = info.name;
        if (name != null) {
          return _this.selectByName(name);
        }
      });
    }

    DataView.prototype.clearSelection = function() {
      var t, _i, _len, _ref, _results;

      _ref = this.visibleTables();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        t = _ref[_i];
        _results.push(t.selected(false));
      }
      return _results;
    };

    DataView.prototype.selectByName = function(name) {
      var t, _i, _len, _ref, _results;

      _ref = this.visibleTables();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        t = _ref[_i];
        _results.push(t.selected(t.name === name));
      }
      return _results;
    };

    DataView.prototype.initTable = function(domElements, tableView) {
      return tableView.afterRender(domElements[0]);
    };

    DataView.prototype.getTableMetaData = function() {
      var _this = this;

      return {
        polyJSObjectFor: function() {
          var args;

          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return _this.getPolyJSObject.apply(_this, args);
        },
        metaDataFor: this.getMetaData,
        tableData: this.tableData,
        extendedMetaAsync: this.getExtendedMetaAsync
      };
    };

    DataView.prototype.getPolyJSObject = function(tableName) {
      return this.dataSource.createPolyJsData(tableName);
    };

    DataView.prototype.getExtendedMetaAsync = function(tableName, columnName, callback) {
      var meta, table, _ref,
        _this = this;

      table = (_ref = this.tableData()) != null ? _ref : {};
      if (table[tableName] != null) {
        meta = table[tableName].meta;
        meta = meta[columnName];
        if (meta.range) {
          return callback(null, meta);
        } else {
          return this.dataSource.getRange(tableName, columnName, meta.type, function(err, result) {
            if (err) {
              return callback(err, null);
            } else {
              meta.range = result;
              return callback(null, meta);
            }
          });
        }
      }
    };

    DataView.prototype.getMetaData = function(tableName, columnName) {
      var meta, table, _ref;

      table = (_ref = this.tableData()) != null ? _ref : {};
      if (columnName === 'count(*)') {
        return {
          'type': 'num'
        };
      } else if (table[tableName] != null) {
        meta = table[tableName].meta;
        if (meta[columnName] != null) {
          return meta[columnName];
        }
        TOAST.raise("Column does not exist within table " + tableName + ": " + columnName);
      }
      return TOAST.raise("Table does not exist: " + tableName);
    };

    return DataView;

  })();

  module.exports = DataView;

}).call(this);
}, "poly/data/metric/attached": function(exports, require, module) {// Generated by CoffeeScript 1.6.2
(function() {
  var AttachedMetricView, CONST, DropdownMetricView, Events, TOAST,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  CONST = require('poly/const');

  TOAST = require('poly/error/toast');

  Events = require('events');

  DropdownMetricView = require('poly/data/metric/dropdown');

  AttachedMetricView = (function(_super) {
    __extends(AttachedMetricView, _super);

    function AttachedMetricView(tableMetaData, params, updateFn, options, attachedMetrics, defaults) {
      var _ref, _ref1, _ref2, _ref3, _ref4,
        _this = this;

      this.options = options;
      if (defaults == null) {
        defaults = {};
      }
      this.discard = __bind(this.discard, this);
      this.generateSpec = __bind(this.generateSpec, this);
      this.toggleAsc = __bind(this.toggleAsc, this);
      this.initDateSlider = __bind(this.initDateSlider, this);
      this.initNumSlider = __bind(this.initNumSlider, this);
      this.initSlider = __bind(this.initSlider, this);
      AttachedMetricView.__super__.constructor.call(this, params, 'tmpl-metric-option', this);
      this.jsdata = tableMetaData.polyJSObjectFor(this.tableName);
      this.meta = tableMetaData.metaDataFor(this.tableName, this.name);
      this.titleName = this.name;
      this.type = this.meta.type;
      if (!this.type) {
        TOAST.raise("Metadata does not contain type for metric " + this.name);
      }
      this.sortMetricList = ko.computed(function() {
        var keys, m, _i, _len, _ref;

        keys = ["None"];
        _ref = attachedMetrics();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          m = _ref[_i];
          if (m !== _this) {
            keys.push(m.visibleName());
          }
        }
        return keys;
      });
      this.sortMetric = ko.observable((_ref = defaults.sort) != null ? _ref : this.sortMetricList[0]);
      this.asc = ko.observable((_ref1 = defaults.asc) != null ? _ref1 : 'asc');
      this.statsList = ko.computed(function() {
        return _this.options().stat[_this.type];
      });
      this.stats = ko.observable((_ref2 = defaults.stats) != null ? _ref2 : this.statsList()[0]);
      this.binwidth = ko.observable((_ref3 = defaults.bin) != null ? _ref3 : this.type === 'num' ? (_ref4 = defaults.bin) != null ? _ref4 : 1 : this.type === 'date' ? this.meta.timerange != null ? this.meta.timerange : 'day' : null);
      this.binoptional = ko.computed(function() {
        return !_this.options().bin;
      });
      this.binned = ko.observable(this.options().bin);
      this.binned.subscribe(updateFn);
      this.binoptional.subscribe(function(val) {
        var _ref5;

        if (!val) {
          _this.binned(true);
          if (!(_this.binwidth() != null)) {
            if (_this.type === 'num') {
              return (_ref5 = defaults.bin) != null ? _ref5 : 100;
            } else if (_this.type === 'date') {
              if (_this.meta.timerange != null) {
                return _this.meta.timerange;
              } else {
                return 'month';
              }
            }
          }
        }
      });
      this.visibleName = ko.computed(function() {
        if (_this.stats() !== 'None') {
          return "" + CONST.stats.nameToStat[_this.stats()] + "(" + _this.name + ")";
        } else if (_this.binned() && _this.binwidth()) {
          return "bin(" + _this.name + "," + (_this.binwidth()) + ")";
        } else {
          return _this.name;
        }
      });
      this.binwidth.subscribe(updateFn);
      this.stats.subscribe(updateFn);
      this.sortMetric.subscribe(updateFn);
      this.asc.subscribe(updateFn);
      this.statsList.subscribe(function(newAcceptableVals) {
        var _ref5;

        if (!(_ref5 = _this.stats(), __indexOf.call(newAcceptableVals, _ref5) >= 0)) {
          return _this.stats(newAcceptableVals[0]);
        }
      });
      this.sortMetricList.subscribe(function(newValues) {
        var _ref5;

        if (!(_ref5 = _this.sortMetric(), __indexOf.call(newValues, _ref5) >= 0)) {
          return _this.sortMetric(newValues[0]);
        }
      });
    }

    AttachedMetricView.prototype.initSlider = function(dom) {
      if (this.type === 'num') {
        this.initNumSlider(dom);
      }
      if (this.type === 'date') {
        return this.initDateSlider(dom);
      }
    };

    AttachedMetricView.prototype.initNumSlider = function(dom) {
      var slider,
        _this = this;

      slider = $('.selector', dom);
      return slider.slider({
        max: 5,
        min: -3,
        step: 1,
        value: 0,
        slide: function(evt, ui) {
          return _this.binwidth(Math.pow(10, ui.value));
        }
      });
    };

    AttachedMetricView.prototype.initDateSlider = function(dom) {
      var TIMERANGE, slider,
        _this = this;

      TIMERANGE = ['second', 'minute', 'hour', 'day', 'week', 'month', 'twomonth', 'quarter', 'sixmonth', 'year', 'twoyear', 'fiveyear', 'decade'];
      slider = $('.selector', dom);
      return slider.slider({
        max: TIMERANGE.length - 1,
        min: 0,
        step: 1,
        value: 4,
        slide: function(evt, ui) {
          return _this.binwidth(TIMERANGE[ui.value]);
        }
      });
    };

    AttachedMetricView.prototype.toggleAsc = function() {
      if (this.asc() === 'asc') {
        return this.asc('dsc');
      } else {
        return this.asc('asc');
      }
    };

    AttachedMetricView.prototype.generateSpec = function() {
      var spec;

      spec = {
        "var": this.visibleName()
      };
      if (this.sortMetric() !== 'None' && this.sortMetric()) {
        spec.sort = this.sortMetric();
        spec.asc = this.asc() === 'asc';
      }
      return spec;
    };

    AttachedMetricView.prototype.discard = function() {
      this.close();
      return $(this).trigger(Events.ui.metric.remove.name);
    };

    return AttachedMetricView;

  })(DropdownMetricView);

  module.exports = AttachedMetricView;

}).call(this);
}, "poly/data/metric/base": function(exports, require, module) {// Generated by CoffeeScript 1.6.2
(function() {
  var MetricView;

  MetricView = (function() {
    function MetricView(name, tableName, type) {
      this.name = name;
      this.tableName = tableName;
      this.type = type;
    }

    return MetricView;

  })();

  module.exports = MetricView;

}).call(this);
}, "poly/data/metric/dropdown": function(exports, require, module) {// Generated by CoffeeScript 1.6.2
(function() {
  var CONST, DropdownMetricView, Events, MetricView,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  CONST = require('poly/const');

  Events = require('events');

  MetricView = require('poly/data/metric/base');

  DropdownMetricView = (function(_super) {
    __extends(DropdownMetricView, _super);

    function DropdownMetricView(params, dropdownTemplate, dropdownData, dropdownAfterRender) {
      this.dropdownTemplate = dropdownTemplate;
      this.dropdownData = dropdownData;
      this.dropdownAfterRender = dropdownAfterRender;
      this.attachDropdown = __bind(this.attachDropdown, this);
      this.close = __bind(this.close, this);
      this.setInactive = __bind(this.setInactive, this);
      this._toggleDropdown = __bind(this._toggleDropdown, this);
      this.toggleDropdown = _.throttle(this._toggleDropdown);
      this.dropdownShowing = false;
      this.value = params.name;
      this.label = params.label;
      DropdownMetricView.__super__.constructor.call(this, params.name, params.tableName, params.type);
    }

    DropdownMetricView.prototype._toggleDropdown = function() {
      if (this.dropdownShowing) {
        return Events.ui.dropdown.hide.trigger();
      } else {
        return Events.ui.dropdown.show.trigger({
          templateName: this.dropdownTemplate,
          data: this.dropdownData,
          targetDom: this.dom,
          onRemove: this.setInactive,
          afterRender: this.dropdownAfterRender,
          info: {
            name: this.label,
            value: this.value
          }
        });
      }
    };

    DropdownMetricView.prototype.setInactive = function() {
      this.dropdownShowing = false;
      if (this.dom) {
        this.dom.removeClass('dropdown-active');
        return this.dom.draggable('enable');
      }
    };

    DropdownMetricView.prototype.close = function() {
      return Events.ui.dropdown.hide.trigger;
    };

    DropdownMetricView.prototype.attachDropdown = function(dom) {
      var _this = this;

      this.dom = $(dom);
      this.dom.on(Events.ui.dropdown.shown.name, function() {
        _this.dropdownShowing = true;
        _this.dom.addClass('dropdown-active');
        return _this.dom.draggable('disable');
      });
      return this.dom.on(Events.ui.dropdown.hidden.name, this.setInactive);
    };

    return DropdownMetricView;

  })(MetricView);

  module.exports = DropdownMetricView;

}).call(this);
}, "poly/data/metric/facet": function(exports, require, module) {// Generated by CoffeeScript 1.6.2
(function() {
  var AttachedMetricView, CONST, Events, FacetMetricView,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  CONST = require('poly/const');

  Events = require('events');

  AttachedMetricView = require('poly/data/metric/attached');

  FacetMetricView = (function(_super) {
    __extends(FacetMetricView, _super);

    function FacetMetricView(tableMetaData, params) {
      var attachedMetrics, options, updateFn,
        _this = this;

      updateFn = function() {
        return Events.ui.chart.render.trigger();
      };
      options = function() {
        return CONST.facets;
      };
      attachedMetrics = function() {
        return [];
      };
      this.removeText = "Remove \"" + params.name + "\" from facet";
      FacetMetricView.__super__.constructor.call(this, tableMetaData, _.extend(params, {
        label: this.aes
      }), updateFn, options, attachedMetrics);
    }

    return FacetMetricView;

  })(AttachedMetricView);

  module.exports = FacetMetricView;

}).call(this);
}, "poly/data/metric/layer": function(exports, require, module) {// Generated by CoffeeScript 1.6.2
(function() {
  var AttachedMetricView, CONST, Events, LayerMetricView,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  CONST = require('poly/const');

  Events = require('events');

  AttachedMetricView = require('poly/data/metric/attached');

  LayerMetricView = (function(_super) {
    __extends(LayerMetricView, _super);

    function LayerMetricView(tableMetaData, params, options, layer, aesName, defaults) {
      var attachedMetrics, updateFn,
        _this = this;

      this.options = options;
      this.layer = layer;
      this.aesName = aesName;
      updateFn = function() {
        return Events.ui.chart.render.trigger();
      };
      attachedMetrics = this.layer.attachedMetrics;
      this.removeText = "Remove \"" + params.name + "\" from " + this.aesName;
      LayerMetricView.__super__.constructor.call(this, tableMetaData, _.extend(params, {
        label: this.aesName
      }), updateFn, this.options, attachedMetrics, defaults);
    }

    return LayerMetricView;

  })(AttachedMetricView);

  module.exports = LayerMetricView;

}).call(this);
}, "poly/data/metric/quickadd": function(exports, require, module) {// Generated by CoffeeScript 1.6.2
(function() {
  var AttachedMetricView, QuickAddMetricView,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  AttachedMetricView = require('poly/data/metric/attached');

  QuickAddMetricView = (function(_super) {
    __extends(QuickAddMetricView, _super);

    function QuickAddMetricView(tableMetaData, params, options, aes) {
      var attachedMetrics, updateFn;

      this.options = options;
      this.aes = aes;
      updateFn = function() {};
      attachedMetrics = function() {
        return [];
      };
      this.removeText = "Remove \"" + params.name + "\" from " + this.aes;
      QuickAddMetricView.__super__.constructor.call(this, tableMetaData, _.extend(params, {
        label: this.aes
      }), updateFn, this.options, attachedMetrics);
    }

    return QuickAddMetricView;

  })(AttachedMetricView);

  module.exports = QuickAddMetricView;

}).call(this);
}, "poly/data/tableView": function(exports, require, module) {// Generated by CoffeeScript 1.6.2
(function() {
  var DND, Events, MetricView, TableMetricListView;

  DND = require('poly/dnd');

  MetricView = require('poly/data/metric/base');

  Events = require('events');

  TableMetricListView = (function() {
    function TableMetricListView(dataTable, parent) {
      var name,
        _this = this;

      this.parent = parent;
      this.name = dataTable.name, this.meta = dataTable.meta, this.jsdata = dataTable.jsdata;
      this.visibleMetrics = (function() {
        var _results;

        _results = [];
        for (name in this.meta) {
          _results.push(this._newMetric(name, this.meta[name].type));
        }
        return _results;
      }).call(this);
      this.visibleMetrics.push(this._newMetric('count(*)', 'num'));
      this.selected = ko.observable(false);
      this.maxHeight = ko.observable(0);
      this.renderHeight = ko.computed(function() {
        var h;

        h = _this.maxHeight();
        if (_this.selected()) {
          return h;
        } else {
          return 0;
        }
      });
    }

    TableMetricListView.prototype.afterRender = function(domElement) {
      return this._recalculateMaxHeight(domElement);
    };

    TableMetricListView.prototype._recalculateMaxHeight = function(domElementInView) {
      var desiredHeight, metricsList;

      if ($(domElementInView).hasClass('table-metric-list')) {
        metricsList = $(domElementInView).find('.metrics');
      } else {
        metricsList = $(domElementInView).parents('.table-metric-list').find('.metrics');
      }
      desiredHeight = metricsList.children().height();
      return this.maxHeight(desiredHeight);
    };

    TableMetricListView.prototype.select = function(view, event) {
      Events.ui.table.open.trigger({
        info: {
          name: this.name
        }
      });
      this.parent.clearSelection();
      this.selected(true);
      return this._recalculateMaxHeight(event.target);
    };

    TableMetricListView.prototype._newMetric = function(metricName, metricType) {
      return new MetricView(metricName, this.name, metricType);
    };

    TableMetricListView.prototype.initMetric = function(domElements, metric) {
      return DND.makeDraggable(domElements, metric);
    };

    return TableMetricListView;

  })();

  module.exports = TableMetricListView;

}).call(this);
}, "poly/dnd": function(exports, require, module) {// Generated by CoffeeScript 1.6.2
/*
Author : Jeeyoung Kim

Drag-and-drop related initialization code.

We're currently using JQuery UI's draggable. This is a wrapper around it, creating
our own set of events (defined under EVENTS object).
*/


(function() {
  var CONST, CONTAINER_EXPR, DRAGGABLE_EVENTS, EVENTS, Events, cloneDraggable, filterFunction, handleError, initDraggable, initDroppable, initDroppable_accept, initDroppable_out, initDroppable_over, makeDiscardEvent, makeDraggable, makeEnterEvent, makeRemoveEvent, sendReject, _commonOptions,
    _this = this;

  CONST = require('poly/const');

  Events = require('events');

  CONTAINER_EXPR = '.dnd-panel';

  EVENTS = {
    ITEM_ENTER: 'dnd-item-enter',
    ITEM_DISCARD: 'dnd-item-discard'
  };

  filterFunction = function(evt, ui) {
    var data, targ;

    targ = $(evt.target);
    data = targ.data('dnd-type');
    return function() {
      var df;

      return $(this).data('dnd-type') === data && (df = $(this).data('dnd-dropfilter'), df || (df = function() {
        return true;
      }), df(targ));
    };
  };

  makeEnterEvent = function(item, itemData) {
    return {
      dom: item,
      data: itemData,
      isDeleted: false,
      "delete": function() {
        return this.isDeleted = true;
      }
    };
  };

  makeRemoveEvent = function(item, itemData) {
    return {
      dom: item,
      data: itemData
    };
  };

  makeDiscardEvent = function(item, itemData) {
    return {
      dom: item,
      data: itemData,
      isDeleted: false,
      "delete": function() {
        return this.isDeleted = true;
      }
    };
  };

  handleError = function(error) {
    debugger;    return console.error(error, error.stack);
  };

  sendReject = null;

  DRAGGABLE_EVENTS = {
    /*
    Events used by initDraggable.
    Comment (Jeeyoung Kim)
    Unlike other places, this place need extensive try / catch statement.
    1. triggering various dnd events may cause exceptions in those event handlers.
    2. JQuery UI has silent catch-all statements that will prevent
    uncaught exception from propagating.
    Thus, uncaught exception in child event handler is forever lost.
    
    This logic does the following:
    1a. trigger ITEM_DISCARD if the item was thrown away from the panel.
    1b. trigger ITEM_ENTER if the item was moved to another panel.
    2.  trigger ITEM_REMOVE if the item was marked as deleted
        by the previous event handlers, by delete() method call.
    */

    dispatchDndEvents: function(evt, ui) {
      var deleteEvt, deleted, dropPermitted, enterEvt, error, item, itemData, newParent, oldParent, targetName;

      try {
        item = $(this);
        newParent = item.data('dnd-new-parent-dom');
        itemData = item.data('dnd-data');
        dropPermitted = item.data('dnd-drop-permitted');
        targetName = item.data('dnd-drop-target-name');
        oldParent = item.parent();
        deleted = false;
        if (newParent) {
          if (dropPermitted) {
            enterEvt = makeEnterEvent(item, itemData);
            try {
              newParent.trigger(EVENTS.ITEM_ENTER, enterEvt);
            } finally {
              deleted = enterEvt.isDeleted;
            }
          } else {
            Events.ui.dnd.reject.trigger({
              info: {
                target: targetName
              }
            });
          }
        } else {
          Events.ui.dnd.drop.trigger({
            info: {
              target: null
            }
          });
        }
      } catch (_error) {
        error = _error;
        handleError(error);
      } finally {
        try {
          if (deleted || !newParent) {
            deleteEvt = makeRemoveEvent(item, itemData);
            oldParent.trigger(EVENTS.ITEM_DISCARD, deleteEvt);
          }
        } catch (_error) {
          error = _error;
          handleError(error);
        } finally {
          item.data('dnd-new-parent-dom', null);
        }
      }
    },
    hlStart: function(evt, ui) {
      $(CONTAINER_EXPR).filter(filterFunction(evt)).addClass('highlight');
      return Events.ui.highlight.begin.trigger({
        selector: ".highlight:visible:not(.disabled)"
      });
    },
    hlStop: function(evt, ui) {
      $('.highlight').removeClass('highlight');
      $('.highlight-strong').removeClass('highlight-strong');
      return Events.ui.highlight.end.trigger();
    },
    increaseZIndex: function(evt, ui) {
      return $(this).addClass('item-selected');
    },
    resetZIndex: function(evt, ui) {
      return $(this).removeClass('item-selected');
    },
    hide: function(evt, ui) {
      return $(this).css('visibility', 'hidden');
    },
    show: function(evt, ui) {
      return $(this).css('visibility', '');
    }
  };

  _commonOptions = function($obj, options) {
    /*
    common options between initDraggable and initDroppable.
    */

    var datatype;

    datatype = options.datatype;
    if (datatype) {
      return $obj.data('dnd-type', datatype);
    }
  };

  initDraggable = function($obj, options) {
    /*
    Turn the given DOM into draggable.
    
    * $obj - jQuery wrapper around target draggable object
    * options - optional parameteres
    * optiony.datatype - sets dnd-type
    */
    options || (options = {});
    $obj.draggable({
      revert: true,
      revertDuration: 0,
      containment: 'document',
      appendTo: 'body',
      helper: 'clone',
      scroll: false
    });
    _commonOptions($obj, options);
    $obj.unbind('.dndDispatch');
    $obj.on('dragstart.dndDispatch', function() {
      return Events.ui.dnd.start.trigger({
        info: {
          name: options.name
        }
      });
    });
    $obj.on('dragstart.dndDispatch', DRAGGABLE_EVENTS.hlStart);
    $obj.on('dragstop.dndDispatch', DRAGGABLE_EVENTS.hlStop);
    $obj.on('dragstop.dndDispatch', DRAGGABLE_EVENTS.dispatchDndEvents);
    $obj.on('dragstart.dndDispatch', DRAGGABLE_EVENTS.increaseZIndex);
    $obj.on('dragstop.dndDispatch', DRAGGABLE_EVENTS.resetZIndex);
    $obj.on('dragstart.dndDispatch', DRAGGABLE_EVENTS.hide);
    return $obj.on('dragstop.dndDispatch', DRAGGABLE_EVENTS.show);
  };

  initDroppable_accept = function(dom) {
    return $(this).data('dnd-type') === dom.data('dnd-type');
  };

  initDroppable_over = function() {
    return $(this).addClass('highlight-strong');
  };

  initDroppable_out = function() {
    return $(this).removeClass('highlight-strong');
  };

  initDroppable = function($obj, options) {
    /*
    Turn the given DOM into droppable.
    
    * options - optional parameteres
    * options.datatype - sets dnd-type
    * options.paneltype - sets dnd-panel-type
    * options.itementer - drop event handler.
    * options.itemdiscard - drop event handler.
    * options.dropfilter - drop acceptance filter
    */

    var datatype, dropfilter, itemdiscard, itementer, name, paneltype;

    options || (options = {});
    _commonOptions($obj, options);
    datatype = options.datatype, paneltype = options.paneltype, itementer = options.itementer, itemdiscard = options.itemdiscard, dropfilter = options.dropfilter, name = options.name;
    dropfilter || (dropfilter = function() {
      return true;
    });
    $obj.data('dnd-dropfilter', dropfilter);
    $obj.droppable({
      accept: initDroppable_accept,
      over: initDroppable_over,
      out: initDroppable_out,
      drop: function(evt, ui) {
        var dom, item, newParent;

        item = $(ui.draggable);
        dom = $(this);
        newParent = item.data('dnd-new-parent-dom', dom);
        item.data('dnd-drop-permitted', dropfilter(item));
        if (name != null) {
          return item.data('dnd-drop-target-name', name);
        }
      }
    });
    $obj.addClass('dnd-panel');
    $obj.on(EVENTS.ITEM_ENTER, function() {
      return Events.ui.dnd.drop.trigger({
        info: {
          target: name
        }
      });
    });
    if (paneltype) {
      $obj.data('dnd-panel-type', paneltype);
    }
    if (itementer) {
      $obj.bind(EVENTS.ITEM_ENTER, itementer);
    }
    if (itemdiscard) {
      return $obj.bind(EVENTS.ITEM_DISCARD, itemdiscard);
    }
  };

  cloneDraggable = function($obj) {
    var cloned, key, _i, _len, _ref;

    cloned = $obj.clone();
    _ref = ['dnd-data', 'dnd-type'];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      key = _ref[_i];
      cloned.data(key, $obj.data(key));
    }
    return cloned;
  };

  makeDraggable = function(dom, metricItem) {
    var $dom;

    $dom = $(dom);
    $dom.data('dnd-data', metricItem);
    return initDraggable($dom, {
      datatype: 'metric',
      name: metricItem.name
    });
  };

  module.exports = {
    CONTAINER_EXPR: CONTAINER_EXPR,
    EVENTS: EVENTS,
    cloneDraggable: cloneDraggable,
    initDraggable: initDraggable,
    initDroppable: initDroppable,
    makeDraggable: makeDraggable
  };

}).call(this);
}, "poly/error/toast": function(exports, require, module) {// Generated by CoffeeScript 1.6.2
(function() {
  var raise;

  raise = function(text) {
    return $().toastmessage('showErrorToast', text);
  };

  module.exports = {
    raise: raise
  };

}).call(this);
}, "poly/header": function(exports, require, module) {// Generated by CoffeeScript 1.6.2
(function() {
  var CONST, Events, HeaderView,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  CONST = require('poly/const');

  Events = require('events');

  HeaderView = (function() {
    function HeaderView() {
      this.editDashboardTitle = __bind(this.editDashboardTitle, this);
      this.toggleSharePanel = __bind(this.toggleSharePanel, this);
      this.changeTitle = __bind(this.changeTitle, this);
      this.backToHome = __bind(this.backToHome, this);
      this.backToDashboard = __bind(this.backToDashboard, this);
      this.hideBackButton = __bind(this.hideBackButton, this);
      this.showBackButton = __bind(this.showBackButton, this);      this.backButtonVisible = ko.observable(false);
      this.headerTitle = ko.observable("Dashboard Builder");
      this.isDefaultTitle = ko.observable(true);
      this.sharePanelVisible = false;
    }

    HeaderView.prototype.showBackButton = function() {
      return this.backButtonVisible(true);
    };

    HeaderView.prototype.hideBackButton = function() {
      return this.backButtonVisible(false);
    };

    HeaderView.prototype.backToDashboard = function(event) {
      this.changeTitle("Dashboard Builder");
      Events.ui.backtodbb.click.trigger();
      Events.nav.dashbuilder.open.trigger();
      return false;
    };

    HeaderView.prototype.backToHome = function(event) {
      Events.nav.home.open.trigger();
      return false;
    };

    HeaderView.prototype.changeTitle = function(title) {
      if (this.isDefaultTitle()) {
        return this.headerTitle(title);
      }
    };

    HeaderView.prototype.toggleSharePanel = function(self, e) {
      this.sharePanelVisible = !this.sharePanelVisible;
      if (this.sharePanelVisible) {
        Events.nav.sharepanel.open.trigger();
        return $("#export-btn").addClass('active');
      } else {
        Events.nav.sharepanel.close.trigger();
        return $("#export-btn").removeClass('active');
      }
    };

    HeaderView.prototype.editDashboardTitle = function() {
      this.isDefaultTitle(false);
      $(".dashboard-title").focus();
      return $(".dashboard-title").html("");
    };

    return HeaderView;

  })();

  module.exports = HeaderView;

}).call(this);
}, "poly/init": function(exports, require, module) {// Generated by CoffeeScript 1.6.2
(function() {
  require('poly/templates');

  require('poly/bindings').init();

}).call(this);
}, "poly/main/builder": function(exports, require, module) {// Generated by CoffeeScript 1.6.2
(function() {
  var AbstractBuilderEntryPoint, DataView, Events, HeaderView, OverlayView, ShareView;

  Events = require('events');

  DataView = require('poly/data/dataView');

  HeaderView = require('poly/header');

  OverlayView = require('poly/overlay');

  ShareView = require('poly/share');

  AbstractBuilderEntryPoint = (function() {
    function AbstractBuilderEntryPoint(params) {
      var _ref;

      this.params = params;
      Events.invalidateCurrentListeners();
      this.dom = params.dom;
      this.dataSource || (this.dataSource = this.params.dataSource);
      this.dataView = new DataView(this.dataSource);
      this.overlayView = new OverlayView();
      this.hasHeader = (_ref = params.header) != null ? _ref : true;
      if (this.hasHeader) {
        this.headerView = new HeaderView();
      }
      this.shareView = new ShareView();
      if (params.width === 'fill') {
        $(this.dom).width('100%');
      }
      if (_.isNumber(params.width)) {
        $(this.dom).width(params.width);
      }
      if (params.height === 'fill') {
        $(this.dom).height('100%');
      }
      if (_.isNumber(params.height)) {
        $(this.dom).height(params.height);
      }
      if (params.width === 'fill' && params.height === 'fill') {
        $(this.dom).addClass('fill');
      }
    }

    return AbstractBuilderEntryPoint;

  })();

  module.exports = AbstractBuilderEntryPoint;

}).call(this);
}, "poly/main/chartbuilder": function(exports, require, module) {// Generated by CoffeeScript 1.6.2
(function() {
  var AbstractBuilderEntryPoint, ChartMainView, ChartbuilderView,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  AbstractBuilderEntryPoint = require('poly/main/builder');

  ChartbuilderView = require('poly/chart/chartbuilder');

  ChartMainView = (function(_super) {
    __extends(ChartMainView, _super);

    function ChartMainView(params) {
      var initial, tableMetaData, _ref;

      this.params = params;
      this.serialize = __bind(this.serialize, this);
      this.params.header = false;
      ChartMainView.__super__.constructor.call(this, this.params);
      initial = (_ref = params.initial) != null ? _ref : {};
      tableMetaData = this.dataView.getTableMetaData();
      this.chartbuilderView = new ChartbuilderView(tableMetaData);
      this.chartbuilderView.reset({
        spec: initial
      });
    }

    ChartMainView.prototype.serialize = function() {
      return this.chartbuilderView.serialize();
    };

    return ChartMainView;

  })(AbstractBuilderEntryPoint);

  module.exports = ChartMainView;

}).call(this);
}, "poly/main/chartviewer": function(exports, require, module) {// Generated by CoffeeScript 1.6.2
(function() {
  var AbstractViewerEntryPoint, ChartViewerMainView,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  AbstractViewerEntryPoint = require('poly/main/viewer');

  ChartViewerMainView = (function(_super) {
    __extends(ChartViewerMainView, _super);

    function ChartViewerMainView(params) {
      var layer, _base, _base1, _i, _len, _ref, _ref1, _ref2, _ref3;

      this.params = params;
      this.init = __bind(this.init, this);
      ChartViewerMainView.__super__.constructor.call(this, this.params);
      this.spec = (_ref = params.initial) != null ? _ref : {};
      if (this.spec.layer) {
        this.spec.layers = [this.spec.layer];
        delete this.spec.layer;
      }
      _ref1 = this.spec.layers;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        layer = _ref1[_i];
        if (!layer.data && layer.tableName) {
          layer.data = this.dataView.getPolyJSObject(layer.tableName);
        }
      }
      if ((_ref2 = (_base = this.spec).width) == null) {
        _base.width = this.params.width;
      }
      if ((_ref3 = (_base1 = this.spec).height) == null) {
        _base1.height = this.params.height;
      }
    }

    ChartViewerMainView.prototype.init = function(dom) {
      this.spec.dom = dom[0];
      return polyjs.chart(this.spec);
    };

    return ChartViewerMainView;

  })(AbstractViewerEntryPoint);

  module.exports = ChartViewerMainView;

}).call(this);
}, "poly/main/dashboard": function(exports, require, module) {// Generated by CoffeeScript 1.6.2
(function() {
  var AbstractBuilderEntryPoint, CONST, ChartbuilderView, DashMainView, DashboardView, Events, NuxView, RemoteDataSource, serverApi,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  CONST = require('poly/const');

  Events = require('events');

  AbstractBuilderEntryPoint = require('poly/main/builder');

  DashboardView = require('poly/dash/dashboard');

  ChartbuilderView = require('poly/chart/chartbuilder');

  RemoteDataSource = require('poly/data/dataSource').RemoteDataSource;

  serverApi = require('poly/serverApi');

  NuxView = require('poly/nux');

  DashMainView = (function(_super) {
    __extends(DashMainView, _super);

    function DashMainView(params) {
      var initial, saveWorthyEvents, swe, tableMetaData, _i, _len, _ref, _ref1,
        _this = this;

      this.params = params;
      this.serialize = __bind(this.serialize, this);
      this.closeChartbuilder = __bind(this.closeChartbuilder, this);
      this.loadChartbuilder = __bind(this.loadChartbuilder, this);
      this._getDataSources = __bind(this._getDataSources, this);
      this._save = __bind(this._save, this);
      this.params.header = true;
      _ref = this.params, this.dataCollection = _ref.dataCollection, this.demoData = _ref.demoData;
      if (this.dataCollection) {
        this.dataSource = this._getDataSources()[0];
      } else if (this.demoData) {
        this.dataSource = poly.data(this.demoData[0]);
      } else {
        throw new Error('No data collection provided!');
      }
      DashMainView.__super__.constructor.call(this, this.params);
      this.name = this.params.name;
      this.dashKey = this.params.key;
      initial = (_ref1 = params.initial) != null ? _ref1 : [];
      tableMetaData = this.dataView.getTableMetaData();
      this.dashboardView = new DashboardView(initial, tableMetaData);
      this.dashVisible = ko.observable(true);
      this.chartbuilderView = new ChartbuilderView(tableMetaData);
      this.chartbuilderVisible = ko.observable(false);
      this.nuxView = params.showTutorial ? new NuxView() : null;
      Events.nav.chartbuilder.open.on(function(event, params) {
        return _this.loadChartbuilder(params);
      });
      Events.nav.dashbuilder.open.on(this.closeChartbuilder);
      Events.nav.home.open.on(function() {
        return _this._save(function(err, result) {
          if (!err) {
            return window.location.href = '/dbb/home';
          }
        });
      });
      saveWorthyEvents = [Events.model.dashboarditem.create, Events.model.dashboarditem.update, Events.model.dashboarditem["delete"]];
      for (_i = 0, _len = saveWorthyEvents.length; _i < _len; _i++) {
        swe = saveWorthyEvents[_i];
        swe.on(function() {
          return _this._save();
        });
      }
    }

    DashMainView.prototype._save = function(callback) {
      if (this.demoData) {
        if (callback) {
          callback();
        }
        return;
      }
      return serverApi.sendPost("/dashboard/" + (encodeURIComponent(this.dashKey)) + "/update", {
        name: this.name,
        spec: this.serialize(),
        dataCollection: this.dataCollection
      }, function(err, res) {
        if (err) {
          TOAST.raise('Error while saving dashboard');
        }
        if (callback) {
          return callback(err, res);
        }
      });
    };

    DashMainView.prototype._getDataSources = function() {
      var d;

      return (function() {
        var _i, _len, _ref, _results;

        _ref = this.dataCollection;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          d = _ref[_i];
          _results.push(new RemoteDataSource(d.dataSourceKey));
        }
        return _results;
      }).call(this);
    };

    DashMainView.prototype.loadChartbuilder = function(params) {
      this.chartbuilderView.reset(params);
      this.chartbuilderVisible(true);
      this.dashVisible(false);
      this.headerView.showBackButton();
      return this.headerView.changeTitle("Chart Builder");
    };

    DashMainView.prototype.closeChartbuilder = function() {
      var chartView, params, spec;

      spec = this.chartbuilderView.spec;
      if (spec && spec.layers && spec.layers.length > 0) {
        chartView = this.chartbuilderView.params.chartView;
        if (chartView != null) {
          chartView.setSpec(spec);
        } else {
          params = {
            spec: spec
          };
          Events.ui.chart.add.trigger(params);
        }
      }
      this.chartbuilderVisible(false);
      this.dashVisible(true);
      return this.headerView.hideBackButton();
    };

    DashMainView.prototype.serialize = function() {
      return this.dashboardView.serialize();
    };

    return DashMainView;

  })(AbstractBuilderEntryPoint);

  module.exports = DashMainView;

}).call(this);
}, "poly/main/dashviewer": function(exports, require, module) {// Generated by CoffeeScript 1.6.2
(function() {
  var AbstractViewerEntryPoint, DashViewerMainView, WorkspaceView,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  AbstractViewerEntryPoint = require('poly/main/viewer');

  WorkspaceView = require('poly/dash/workspace');

  DashViewerMainView = (function(_super) {
    __extends(DashViewerMainView, _super);

    function DashViewerMainView(params) {
      var tableMetaData;

      this.params = params;
      DashViewerMainView.__super__.constructor.call(this, this.params);
      tableMetaData = this.dataView.getTableMetaData();
      this.workspaceView = new WorkspaceView(params.initial, tableMetaData, true);
    }

    return DashViewerMainView;

  })(AbstractViewerEntryPoint);

  module.exports = DashViewerMainView;

}).call(this);
}, "poly/main/viewer": function(exports, require, module) {// Generated by CoffeeScript 1.6.2
(function() {
  var AbstractViewerEntryPoint, DataView, Events;

  Events = require('events');

  DataView = require('poly/data/dataView');

  AbstractViewerEntryPoint = (function() {
    function AbstractViewerEntryPoint(params) {
      this.params = params;
      Events.invalidateCurrentListeners();
      this.dom = params.dom;
      this.dataSource = this.params.dataSource;
      this.dataView = new DataView(this.dataSource);
    }

    return AbstractViewerEntryPoint;

  })();

  module.exports = AbstractViewerEntryPoint;

}).call(this);
}, "poly/nux": function(exports, require, module) {// Generated by CoffeeScript 1.6.2
(function() {
  var Events, NUX_STEPS, NuxView,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Events = require('events');

  NUX_STEPS = [
    {
      cover: '.container',
      template: 'tmpl-nux-intro',
      ref: '.workspace-area',
      top: 20,
      left: 15,
      arrowDir: 'none'
    }, {
      cover: 'HEADER, .content-panel',
      template: 'tmpl-nux-data-panel',
      ref: '.content-panel',
      top: 20,
      left: 15
    }, {
      cover: 'HEADER, .workspace-area',
      template: 'tmpl-nux-charts-panel',
      instructions: [
        {
          text: 'Click the "Bar Chart" button',
          event: Events.ui.quickadd.expand
        }, {
          text: 'Drag "created" to "X Axis" and "count(*)" to "Y Axis"',
          event: Events.ui.chart.add
        }
      ],
      ref: '.workspace-area',
      top: 20,
      left: 15
    }, {
      cover: 'HEADER, .data-panel, .menu-panel',
      template: 'tmpl-nux-workspace-panel',
      instructions: [
        {
          text: 'Mouse over the chart and click "Edit Chart"',
          event: Events.ui.chart.render
        }
      ],
      ref: '.data-panel',
      top: 20,
      left: 25,
      arrowDir: 'right'
    }, {
      cover: 'HEADER, .chart-container',
      template: 'tmpl-nux-layers-panel',
      instructions: [
        {
          text: 'Drag "success" to "Color"',
          event: Events.ui.chart.render
        }
      ],
      ref: '.chart-container',
      top: 20,
      left: 15
    }, {
      cover: '.data-panel, .menu-panel',
      template: 'tmpl-nux-finished',
      event: Events.nav.dashbuilder.open,
      ref: '.data-panel',
      top: 20,
      left: 25,
      arrowDir: 'none'
    }
  ];

  NuxView = (function() {
    function NuxView() {
      this.clear = __bind(this.clear, this);
      this._nextStep = __bind(this._nextStep, this);
      this.nextStep = __bind(this.nextStep, this);      this.curStep = 0;
      this.arrowDir = ko.observable('left');
      this.template = ko.observable();
      this.covers = ko.observableArray([]);
      this.instrPos = ko.observable({});
      this.instructions = ko.observableArray([]);
      _.delay(this.nextStep, 100);
    }

    NuxView.prototype.nextStep = function() {
      var fader,
        _this = this;

      if (this.curStep === NUX_STEPS.length) {
        this.clear();
        return;
      }
      $('#nux-fade').remove();
      fader = $('#nux').clone();
      fader.attr('id', 'nux-fade');
      $('BODY').append(fader);
      fader.fadeOut();
      $('#nux').hide();
      return _.delay(function() {
        _this._nextStep();
        return $('#nux').fadeIn();
      }, 1500);
    };

    NuxView.prototype._nextStep = function() {
      var $ref, coverables, step, _ref,
        _this = this;

      step = NUX_STEPS[this.curStep++];
      this.template(step.template);
      $ref = $(step.ref);
      this.instrPos({
        top: ($ref.offset().top + step.top) + "px",
        left: ($ref.offset().left + step.left) + "px"
      });
      this.arrowDir((_ref = step.arrowDir) != null ? _ref : 'left');
      coverables = $(step.cover);
      this.covers.removeAll();
      _.each(coverables, function(ele) {
        var $ele, cover;

        $ele = $(ele);
        cover = {
          top: $ele.offset().top + "px",
          left: $ele.offset().left + "px",
          width: $ele.outerWidth() + "px",
          height: $ele.outerHeight() + "px"
        };
        return _this.covers.push(cover);
      });
      this.instrComplete = 0;
      this.instructions.removeAll();
      _.each(step.instructions, function(instr, idx) {
        var obj;

        obj = {
          i: idx + 1,
          strike: ko.observable(false)
        };
        $.extend(obj, instr);
        _this.instructions.push(obj);
        if (instr.event) {
          return instr.event.one(function(event, params) {
            obj.strike(true);
            if (++_this.instrComplete === step.instructions.length) {
              return _.delay(_this.nextStep(), 500);
            }
          });
        }
      });
      if (step.event) {
        return step.event.one(function(event, params) {
          return _this.nextStep();
        });
      }
    };

    NuxView.prototype.clear = function() {
      return $('#nux').fadeOut();
    };

    return NuxView;

  })();

  module.exports = NuxView;

}).call(this);
}, "poly/overlay": function(exports, require, module) {// Generated by CoffeeScript 1.6.2
(function() {
  var CONST, Events, OverlayView,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  CONST = require('poly/const');

  Events = require('events');

  OverlayView = (function() {
    function OverlayView() {
      this.endHighlight = __bind(this.endHighlight, this);
      this.beginHighlight = __bind(this.beginHighlight, this);
      this.handleDocumentClick = __bind(this.handleDocumentClick, this);
      this.layoutDropdown = __bind(this.layoutDropdown, this);
      this.handleDropdownHide = __bind(this.handleDropdownHide, this);
      this.handleDropdownShow = __bind(this.handleDropdownShow, this);
      this.enableDropdown = __bind(this.enableDropdown, this);
      this.disableDropdown = __bind(this.disableDropdown, this);      this.dropdown = ko.observable(false);
      this.shadeVisible = ko.observable(false);
      this.dropdownEnabled = true;
      Events.ui.dropdown.disable.on(this.disableDropdown);
      Events.ui.dropdown.enable.on(this.enableDropdown);
      Events.ui.dropdown.show.on(this.handleDropdownShow);
      Events.ui.dropdown.hide.on(this.handleDropdownHide);
      Events.ui.highlight.begin.on(this.beginHighlight);
      Events.ui.highlight.end.on(this.endHighlight);
    }

    OverlayView.prototype.disableDropdown = function() {
      this.dropdownEnabled = false;
      return this.handleDropdownHide();
    };

    OverlayView.prototype.enableDropdown = function() {
      return this.dropdownEnabled = true;
    };

    OverlayView.prototype.handleDropdownShow = function(event, options) {
      this.handleDropdownHide();
      if (!this.dropdownEnabled) {
        return;
      }
      this.dropdown(options);
      $("BODY").addClass("scrolling-disabled");
      $(document).on("click", this.handleDocumentClick);
      if ((options != null ? options.targetDom : void 0) != null) {
        return options.targetDom.trigger(Events.ui.dropdown.shown.name);
      }
    };

    OverlayView.prototype.handleDropdownHide = function() {
      var _ref;

      $(document).off("click", this.handleDocumentClick);
      $("BODY").removeClass("scrolling-disabled");
      if (((_ref = this.dropdown()) != null ? _ref.targetDom : void 0) != null) {
        this.dropdown().targetDom.trigger(Events.ui.dropdown.hidden.name);
      }
      return this.dropdown(false);
    };

    OverlayView.prototype.layoutDropdown = function(dropdownDom, dropdown) {
      this.dropdownDom = dropdownDom;
      $(this.dropdownDom).css({
        top: dropdown.targetDom.offset().top,
        left: dropdown.targetDom.offset().left
      });
      $(".cover-top", this.dropdownDom).css({
        width: dropdown.targetDom.outerWidth() - 2
      });
      if (dropdown.afterRender) {
        return dropdown.afterRender();
      }
    };

    OverlayView.prototype.handleDocumentClick = function(event) {
      var found;

      if (!this.dropdown()) {
        return;
      }
      if (this.dropdown().targetDom.get(0) === event.target || this.dropdown().targetDom.has(event.target).length > 0) {
        return true;
      }
      found = false;
      if (this.dropdownDom === event.target || $(this.dropdownDom).has(event.target).length > 0) {
        found = true;
      }
      if (!found) {
        return this.handleDropdownHide();
      }
    };

    OverlayView.prototype.beginHighlight = function(event, options) {
      var _this = this;

      this.shadeVisible(true);
      $("#shadeOverlay").click(function(event) {
        if (!event.isDefaultPrevented()) {
          Events.ui.highlight.click.trigger();
        }
        return _this.endHighlight();
      });
      if (!(options && options.selector)) {
        return;
      }
      return _.each($(options.selector), function(dom) {
        var $dom, $parent, clone;

        $dom = $(dom);
        $parent = $(dom).parents(".polychart-ui");
        clone = $dom.clone();
        clone.css({
          position: "absolute",
          left: $dom.offset().left - $parent.offset().left,
          top: $dom.offset().top - $parent.offset().top,
          width: $dom.width(),
          height: $dom.height()
        });
        $("#shadeOverlay").append(clone);
        return (_.isFunction(options.click)) && clone.click(function(event) {
          options.click(event, $dom);
          return event.preventDefault();
        });
      });
    };

    OverlayView.prototype.endHighlight = function() {
      this.shadeVisible(false);
      $("#shadeOverlay").html("");
      return $('.highlight').removeClass('highlight');
    };

    return OverlayView;

  })();

  module.exports = OverlayView;

}).call(this);
}, "poly/parser": function(exports, require, module) {// Generated by CoffeeScript 1.6.2
(function() {
  var CONST, Parser;

  CONST = require('poly/const');

  Parser = (function() {
    function Parser() {}

    Parser.prototype.getName = function(name) {
      var first, last, next;

      if (name === 'count(*)') {
        return name;
      }
      first = _.indexOf(name, '(');
      if (first === -1) {
        return name;
      }
      next = _.indexOf(name, ',');
      if (first !== -1) {
        return name.slice(first + 1, next);
      }
      last = _.indexOf(name, ')');
      return name.slice(first + 1, last);
    };

    Parser.prototype.getBinwidth = function(name) {
      var last, next;

      if (name.slice(0, 4) === "bin(") {
        next = _.indexOf(name, ',');
        last = _.indexOf(name, ')');
        return name.slice(next + 1, last);
      }
      return null;
    };

    Parser.prototype.getStats = function(name) {
      var first, stats;

      if (name === 'count(*)') {
        return name;
      }
      first = _.indexOf(name, '(');
      if (first !== -1) {
        stats = name.slice(0, first);
        if (stats !== 'bin') {
          return stats;
        }
      }
      return null;
    };

    return Parser;

  })();

  module.exports = Parser;

}).call(this);
}, "poly/serverApi": function(exports, require, module) {// Generated by CoffeeScript 1.6.2
(function() {
  var sendGet, sendPost;

  sendGet = function(path, params, callback) {
    if (!params._xsrf) {
      params._xsrf = docCookies.getItem('_xsrf');
    }
    $.ajax("/dbb/api" + path, {
      data: params,
      dataType: 'json',
      success: function(data, textStatus, req) {
        return callback(null, data);
      },
      error: function(req, textStatus, errorThrown) {
        return callback({
          httpStatus: req.status,
          message: textStatus
        });
      }
    });
    return void 0;
  };

  sendPost = function(path, body, callback) {
    var xsrfParam;

    xsrfParam = docCookies.getItem('_xsrf');
    $.ajax("/dbb/api" + path + "?_xsrf=" + (encodeURIComponent(xsrfParam)), {
      type: 'POST',
      data: JSON.stringify(body),
      contentType: 'application/json',
      dataType: 'json',
      processData: false,
      success: function(data, textStatus, req) {
        return callback(null, data);
      },
      error: function(req, textStatus, errorThrown) {
        return callback({
          httpStatus: req.status,
          message: textStatus
        });
      }
    });
    return void 0;
  };

  module.exports = {
    sendGet: sendGet,
    sendPost: sendPost
  };

}).call(this);
}, "poly/share": function(exports, require, module) {// Generated by CoffeeScript 1.6.2
(function() {
  var CONST, Events, ShareView,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  CONST = require('poly/const');

  Events = require('events');

  ShareView = (function() {
    function ShareView() {
      this.close = __bind(this.close, this);
      this.open = __bind(this.open, this);      this.defaultPanelRight = -250;
      this.panelRight = ko.observable(this.defaultPanelRight);
      Events.nav.sharepanel.open.on(this.open);
      Events.nav.sharepanel.close.on(this.close);
    }

    ShareView.prototype.open = function() {
      return this.panelRight(0);
    };

    ShareView.prototype.close = function() {
      return this.panelRight(this.defaultPanelRight);
    };

    ShareView.prototype.sendToEmail = function() {
      return Events.share.email.click.trigger();
    };

    ShareView.prototype.copyURL = function() {
      return Events.share.copyurl.click.trigger();
    };

    ShareView.prototype.copyImage = function() {
      return Events.share.copyimage.click.trigger();
    };

    ShareView.prototype.exportPDF = function() {
      return Events["export"].pdf.click.trigger();
    };

    ShareView.prototype.exportPNG = function() {
      return Events["export"].png.click.trigger();
    };

    ShareView.prototype.exportSVG = function() {
      return Events["export"].svg.click.trigger();
    };

    ShareView.prototype.exportPPT = function() {
      return Events["export"].ppt.click.trigger();
    };

    return ShareView;

  })();

  module.exports = ShareView;

}).call(this);
}, "poly/template": function(exports, require, module) {// Generated by CoffeeScript 1.6.2
/*
Author : Jeeyoung Kim

Custom templating engine for knockout.

It uses the same templating syntax, except the templates can be provided
as a JSON string, instead of referring to the actual DOM elements.
*/


(function() {
  "use strict";
  var ObjectTemplateSource, StringTemplateEngine, loadTemplateEngine;

  StringTemplateEngine = function(templates) {
    this.templates = templates;
    /*
    constructor for the String template engine.
    
    Notice that this class is not defined via coffeescript's "class" keyword,
    but the prototype is configured via ko.utils.extend...,
    this is because `StringTemplateEngine` primarily interacts with knockout code,
    which uses ko.utils.extend() internally.
    
    * templates - {String:String}
    */

    this.allowTemplateRewriting = false;
    this.templateCache = {};
  };

  StringTemplateEngine.prototype = ko.utils.extend(new ko.nativeTemplateEngine(), {
    makeTemplateSource: function(template) {
      var value;

      if (typeof template === 'string') {
        if (this.templates[template]) {
          if (this.templateCache[template]) {
            return this.templateCache[template];
          }
          return (this.templateCache[template] = new ObjectTemplateSource(this.templates[template]));
        } else {
          throw new Error("Unknown template type: " + template);
        }
      }
      value = ko.nativeTemplateEngine.prototype.makeTemplateSource.apply(this, arguments);
      return value;
    }
  });

  ObjectTemplateSource = (function() {
    /*
    Implements the template source API that's defined internally inside Knockout.js
    */
    function ObjectTemplateSource(template) {
      this.template = template;
      this.data = {};
    }

    ObjectTemplateSource.prototype.text = function() {
      /*
      Getter / setter for text.
      */
      if (arguments.length === 0) {
        return this.template;
      }
      return this.template = arguments[0];
    };

    ObjectTemplateSource.prototype.data = function(key) {
      /*
      Getter / setter for data
      */

      var value;

      if (arguments.length === 1) {
        return this.data[key];
      }
      value = arguments[1];
      return this.data[key] = value;
    };

    return ObjectTemplateSource;

  })();

  loadTemplateEngine = function(templateDefinitions) {
    /*
    Function to initialize knockout templates from strings.
    */

    var engine;

    engine = new StringTemplateEngine(templateDefinitions);
    return ko.setTemplateEngine(engine);
  };

  module.exports = {
    loadTemplateEngine: loadTemplateEngine
  };

}).call(this);
}, "poly/templates": function(exports, require, module) {require('poly/template').loadTemplateEngine({"tmpl-dropdown": "<div>\n<div class=\"select-icon\"></div>\n<div class=\"name\">\n</div>\n<div class=\"metric-option-arrow\">\n</div>\n</div>", "tmpl-overlay-container": "<div id='dropdown-container'>\n<!-- ko if: dropdown() -->\n<div data-bind=\"template: {\nname: 'tmpl-overlay-dropdown-dialog',\ndata: dropdown,\nafterRender: layoutDropdown\n}\"></div>\n<!-- /ko -->\n</div>\n<div id=\"shadeOverlay\" data-bind=\"css: {active: shadeVisible}\">\n</div>", "tmpl-header": "<header>\n<img class=\"logo\" src=\"assets/logo.svg\" />\n<span class=\"dashboard-title\" data-bind=\"text: headerTitle\">\n</span>\n<a id=\"export-btn\" data-bind=\"click: toggleSharePanel\" class=\"btn-small\">\n<img src=\"assets/icon_export.png\" />\n<div class=\"content\">Export Dashboard</div>\n</a>\n<!-- ko if: backButtonVisible -->\n<a data-bind=\"click: backToDashboard\" class=\"btn-small\">\n<img src=\"assets/icon_back.png\" />\n<div class=\"content\">Return to Dashboard</div>\n</a>\n<!-- /ko -->\n<a data-bind=\"click: backToHome\" id=\"backToHome\" class=\"btn-small\">\n<img src=\"assets/icon_home.svg\" />\n<div class=\"content\">Return Home</div>\n</a>\n</header>", "tmpl-metric-droppable": "<div class=\"droppable\" data-bind=\"css: {disabled: !enabled}\">\n<div class=\"inner cf\">\n<img class=\"droppable-img\" src=\"assets/drag.png\"></img>\n<div class=\"droppable-text\"><span class='bolded'>SELECT</span> Metric</div>\n</div>\n</div>", "tmpl-dropdown-select-menu": "<div class=\"dropdown-select-menu\">\n<!-- ko foreach: options -->\n<div class=\"option\" data-bind=\"click: $data.handler, visible: $data.selected()[1] != $data.value\">\n<!-- ko if: $data.iconClass -->\n<div data-bind=\"attr: {class: $data.iconClass}\"></div>\n<!-- /ko -->\n<div class=\"name\" data-bind=\"html: $data.text\"></div>\n</div>\n<!-- /ko -->\n</div>", "tmpl-filter-cat": "<div class=\"menu-item-container\">\n<div class=\"menu-item-name\">\n</div>\n<div class=\"menu-item\">\n<div class='dropdown chart-dropdown btn-large' data-bind=\"pui_dropdown: {\noptions: filterCatOptions,\nselected: filterCatValue,\nhas_icons: false\n}\">\n</div>\n</div>\n</div>", "tmpl-facet": "<h2>\nSplit Chart\n</h2>\n<div class=\"cf advanced-panel-content\" data-dnd-type=\"metric\" data-bind=\"pui_dndContainer: {itementer:onEnter,itemdiscard:onDiscard,datatype:'metric',name:'splitby',rerender:metric}\">\n<div class=\"advanced-panel-name\">Split By</div>\n<div class=\"advanced-panel-metric\">\n<!-- ko if: metric -->\n<div class=\"dropped-metric\" data-bind=\"template: {\ndata: metric,\nname: metricTemplate,\nafterRender: initMetricItem,\n}\">\n</div>\n<!-- /ko -->\n<!-- ko ifnot: metric -->\n<!-- ko template: {name: 'tmpl-metric-droppable', data: {enabled: true}} --><!-- /ko -->\n<!-- /ko -->\n</div>\n</div>", "tmpl-table-metric-list": "<div class=\"table-metric-list\" data-bind=\"css: {selected: selected}\">\n<div class=\"table-title\" data-bind=\"click: select\">\n<div class=\"title-text\" data-bind=\"text: name\"></div>\n<div class=\"arrow\"></div>\n</div>\n<div class=\"metrics\" data-bind=\"style: {maxHeight: renderHeight() + 'px'}\">\n<!-- Extra div to help with animation -->\n<div data-bind=\"template: {\nforeach: visibleMetrics,\nname: 'tmpl-metric-item',\nafterRender: initMetric,\n}\">\n</div>\n</div>\n</div>", "tmpl-chart-viewer": "<div class=\"chart-inner\">\n</div>", "tmpl-aesthetic-size": "<div class=\"menu-item-container\" data-dnd-type=\"metric\" data-bind=\"pui_dndContainer: {itementer:onEnter,itemdiscard:onDiscard,datatype:'metric',name:name,rerender:metric}, css: {disabled: !enabled()}\">\n<div class=\"menu-item-name\">\n<div class=\"content\" data-bind=\"text: name\"></div>\n</div>\n<div class=\"menu-item\">\n<!-- ko if: metric -->\n<div class=\"dropped-metric\" data-bind=\"template: {\ndata: metric,\nname: metricTemplate,\nafterRender: initMetricItem,\n}\">\n</div>\n<!-- /ko -->\n<!-- ko ifnot: metric -->\n<div class=\"droppable\">\n<div class=\"slider-container\">\n<div class=\"slider selector\"></div>\n</div>\n</div>\n<!-- /ko -->\n</div>\n</div>", "tmpl-filter-dropdown": "<div class=\"dropdown-content metric-option\">\n<div class=\"btn-large\" data-bind=\"click: onMetricDiscard\">\n<img src=\"assets/icon_close.png\" />\n<div class=\"content\" data-bind=\"text: removeText\">\n</div>\n</div>\n</div>", "tmpl-filter": "<div class=\"menu-item-container\"\ndata-dnd-type=\"metric\"\ndata-bind=\"pui_dndContainer: {\nitementer:onMetricEnter,\nitemdiscard:onMetricDiscard,\ndropfilter:dropFilter,\ndatatype:'metric',\nname:label},\ncss: {disabled: !$parent.enabled()}\">\n<div class=\"menu-item-name\">\n<div class=\"content\" data-bind=\"text: label\"></div>\n</div>\n<div class=\"menu-item\">\n<div class=\"dropped-metric\" data-bind=\"template: {\ndata: metric,\nname: 'tmpl-metric-dropdown',\nafterRender: initMetricItem\n}\">\n</div>\n</div>\n</div>\n<!-- ko template: {\nname: 'tmpl-filter-slider',\nif: metric().type == 'date' || metric().type == 'num',\nafterRender: initSliderFilter\n}--><!-- /ko -->\n<!-- ko template: {\nname: 'tmpl-filter-cat',\nif: metric().type == 'cat',\nafterRender: initCatFilter\n}--><!-- /ko -->", "tmpl-dashboard-viewer": "<div class=\"graphbuilder-main\">\n<div class=\"dashboard-container\" data-bind=\"css: {viewer: true}\">\n<!-- ko template: {name: 'tmpl-workspace', data:workspaceView, afterRender: workspaceView.init} --><!-- /ko -->\n</div>\n</div>", "tmpl-chart-item": "<div class=\"chart item\">\n<div class=\"chart-inner\">\n</div>\n<div class=\"chart-details\" data-bind=\"visible: !isViewer()\">\n<div class=\"details-button\" id=\"editChartBtn\" data-bind=\"click: editChart\">\n<img src=\"assets/icon_edit.png\" />\n<span class=\"text\"><span class=\"keyword\">Edit</span> Chart</span>\n</div>\n<div class=\"details-button\" id=\"editChartBtn\" data-bind=\"click: deleteChart\">\n<img src=\"assets/icon_delete.png\" />\n<span class=\"text\"><span class=\"keyword\">Delete</span> Chart</span>\n</div>\n</div>\n</div>", "tmpl-nux-charts-panel": "<h1>The Charts Panel</h1>\n<p>\nYou can use this panel to add a chart to your dashboard.\n</p>", "tmpl-nux-workspace-panel": "<h1>Your Workspace</h1>\n<p>\nYour new chart appears on your workspace. You can edit it further to get the exact chart you want.\n</p>", "tmpl-quickadd-comment": "<div class='quickadd-container'>\n<div class='quickadd-container-inner'>\n<div class='quickadd-item' data-bind=\"click:addItem\">\n<div data-bind=\"attr: {class: imageClass} \"/>\n<div>\n<span class=\"bolded\">MAKE</span> <span data-bind=\"text:name\">\n</div>\n</div>\n</div>\n</div>", "tmpl-data-panel": "<div class=\"data-panel\">\n<h1>Data</h1>\n<div class=\"scroll\" data-bind=\"template: {\nforeach: visibleTables,\nname: 'tmpl-table-metric-list',\nafterRender: initTable,\n}\"></div>\n</div>", "tmpl-quickadd-aes": "<div class=\"aes full-width\" data-dnd-type=\"metric\" data-bind=\"pui_dndContainer: {itementer:onEnter,itemdiscard:onDiscard,dropfilter:dropFilter,datatype:'metric',name:aes,rerender:metric}, css: {disabled: !enabled()}\">\n<div class=\"title\" data-bind=\"text: aes\"></div>\n<!-- ko if: metric -->\n<div class=\"dropped-metric\" data-bind=\"template: {\ndata: metric,\nname: 'tmpl-metric-attached',\nafterRender: initMetricItem,\n}\">\n</div>\n<!-- /ko -->\n<!-- ko ifnot: metric -->\n<!-- ko template: {name: 'tmpl-metric-droppable', data: {enabled: enabled()}} -->\n<!-- /ko -->\n<!-- /ko -->\n</div>", "tmpl-main": "<div class=\"container\" data-bind='css: { hasheader: hasHeader }'>\n<!-- ko if: nuxView -->\n<!-- ko template: {name: 'tmpl-nux', data: nuxView} --><!-- /ko -->\n<!-- /ko -->\n<!-- ko template: {name: 'tmpl-header', data: headerView } --><!-- /ko -->\n<!-- ko template: {name: 'tmpl-overlay-container', data: overlayView } --><!-- /ko -->\n<div class='graphbuilder-main'>\n<!-- ko template: {name: 'tmpl-data-panel', data:dataView} --><!-- /ko -->\n<div class=\"dashboard-container\" data-bind=\"css: {visible: dashVisible}\">\n<!-- ko if: dashVisible -->\n<!-- ko template: {name: 'tmpl-dash', data: dashboardView} --><!-- /ko -->\n<!-- /ko -->\n</div>\n<div class=\"chartbuilder-container\" data-bind=\"css: {visible: chartbuilderVisible}\">\n<!-- ko if: chartbuilderVisible -->\n<!-- ko template: {name: 'tmpl-chartbuilder', data: chartbuilderView} --><!-- /ko -->\n<!-- /ko -->\n</div>\n</div>\n<!-- ko template: {name: 'tmpl-sharepanel', data: shareView} --><!-- /ko -->\n</div>", "tmpl-nux-data-panel": "<h1>The Data Panel</h1>\n<p>\nHere is where your data is displayed. The green buttons are metrics (typically columns) from a database. You can drag them around the page.\n</p>\n<div class=\"btn-flat\" data-bind=\"click: nextStep\">Continue</div>", "tmpl-nux-intro": "<h1>Welcome to Polychart!</h1>\n<p>\nThis is your dashboard builder. Let's start by creating a quick chart to answer this question:\n</p>\n<h2>How many emails are sent successfully each day?</h2>\n<div class=\"btn-flat\" data-bind=\"click: nextStep\">Continue</div>\n<div class=\"skip\">\n<a href=\"#\" data-bind=\"click: clear\">Skip Tutorial</a>\n</div>", "tmpl-aesthetic-color": "<div class=\"menu-item-container\" data-dnd-type=\"metric\" data-bind=\"pui_dndContainer: {itementer:onEnter,itemdiscard:onDiscard,datatype:'metric',name:name,rerender:metric}, css: {disabled: !enabled()}\">\n<div class=\"menu-item-name\">\n<div class=\"content\" data-bind=\"text: name\"></div>\n</div>\n<div class=\"menu-item\">\n<!-- ko if: metric -->\n<div class=\"dropped-metric\" data-bind=\"template: {\ndata: metric,\nname: metricTemplate,\nafterRender: initMetricItem,\n}\">\n</div>\n<!-- /ko -->\n<!-- ko ifnot: metric -->\n<div class=\"droppable\">\n<input class='selector' value='#CC3333' type=\"text\" data-bind=\"afterRender: afterRender\" />\n</div>\n<!-- /ko -->\n</div>\n</div>", "tmpl-coord": "<h2>\nCoordinates\n</h2>\n<div class=\"cf advanced-panel-content\">\n<a id=\"polar-btn\" class=\"btn-large\" data-bind=\"click: polarClick\">\n<div class=\"content\">\n<span data-bind=\"text: polarText\">Polar</span>\n</div>\n</a>\n<a id=\"flip-btn\" class=\"btn-large\" data-bind=\"click: flipClick\">\n<div class=\"content\">\nFlip Axes\n</div>\n</a>\n</div>", "tmpl-metric-item": "<div class=\"metric\">\n<div class=\"metric-icon\" data-bind=\"css: type\"></div>\n<div class=\"metric-name\" data-bind=\"text: name\"></div>\n<div class=\"drag-hint\"></div>\n</div>", "tmpl-advanced-panel": "<div id=\"menu-shade\" data-bind=\"css: {active: expanded()},\nstyle: {opacity: shadeOpacity(),\nheight: shadeHeight()},\nclick: toggleExpand\">\n</div>\n<div id=\"advanced-panel\" data-bind=\"css: {expanded: expanded()},\nstyle: {top: panelTop() + 'px'}\">\n<div class='advanced-link btn-full-width'>\n<div class=\"content\" data-bind=\"click: toggleExpand\">\n<img src=\"assets/icon_advanced.png\" />\n<div class=\"text\">See More Chart Options</div>\n</div>\n</div>\n<!-- ko if: expanded -->\n<div class=\"panel-background\" data-bind=\"style: {opacity: shadeOpacity()}\">\n<div class=\"close-btn\" data-bind=\"click: toggleExpand\"></div>\n<h1>Chart Options</h1>\n<div class=\"advanced-panel-single\" data-bind=\"template: {name: 'tmpl-facet', data: facetView }\"></div>\n<div class=\"advanced-panel-single\" data-bind=\"template: {name: 'tmpl-coord', data: coordView }\"></div>\n</div>\n<!-- /ko -->\n</div>", "tmpl-metric-option": "<div class=\"metric-option\">\n<!-- ko if: ((type == 'num' || type == 'date') && stats() == 'None') -->\n<div class=\"metric-option-item\" data-bind=\"template: {name: 'tmpl-metric-option-bin', afterRender: initSlider}\">\n</div>\n<!-- /ko -->\n<div class=\"metric-option-item\" data-bind=\"template: {name: 'tmpl-metric-option-stats'}\"></div>\n<!-- ko if: type == 'cat' -->\n<div class=\"metric-option-item\" data-bind=\"template: {name: 'tmpl-metric-option-sort'}\"></div>\n<!-- /ko -->\n<div class=\"btn-large\" data-bind=\"click: discard\">\n<img src=\"assets/icon_close.png\" />\n<div class=\"content\" data-bind=\"text: removeText\">\n</div>\n</div>\n</div>", "tmpl-layer": "<div class=\"single-layer\">\n<div class=\"menu-item-container\">\n<div class=\"menu-item-name\">\n<div class=\"content\">Type</div>\n</div>\n<div class=\"menu-item\">\n<div class='dropdown chart-dropdown btn-large' data-bind=\"pui_dropdown: {\noptions: plotOptionsItem,\nselected: plotOptionSelected,\nhasIcons: true,\nname: 'type'\n}\"></div>\n</div>\n</div>\n<div data-bind=\"foreach: visibleAesthetics\" class=\"full-width cf\">\n<div data-bind= \"template: {name: template, afterRender: afterRender}\"></div>\n</div>\n<div class=\"menu-item-container\">\n<div class=\"menu-item-name\"></div>\n<div class=\"btn-flat\" href=\"#\" data-bind=\"click: removeLayer\">\n<div class=\"content\">\n<img src=\"assets/icon_delete.png\" />\n<span class=\"bolded\">Delete</span> Layer\n</div>\n</div>\n</div>\n</div>", "tmpl-metric-option-bin": "<div class=\"metric-option-item-title\">\nBin Size:\n</div>\n<!-- ko if: binoptional -->\n<input class=\"metric-option-item-checkbox\" type=\"checkbox\" data-bind=\"checked:binned\">\n</input>\n<!-- /ko -->\n<div class=\"metric-option-item-container\">\n<div class=\"slider-container\">\n<div class=\"slider selector\"></div>\n<div class=\"slider-value\">\n<span data-bind=\"text: binwidth\"></span>\n</div>\n</div>\n</div>", "tmpl-chartbuilder-chart": "<div class='chartbuilder-chart'></div>", "tmpl-filter-slider": "<!-- ko if: metric().type == 'date' -->\n<div class=\"date-filter-dropdown menu-item-container\">\n<div class=\"menu-item-name\">\n</div>\n<div class=\"menu-item\">\n<div class='dropdown btn-large' data-bind=\"pui_dropdown: {\noptions: dateOptions,\nselected: dateOptionSelected,\nhasIcons: false,\nname: 'dateRange'\n}\"></div>\n</div>\n</div>\n<!-- /ko -->\n<div class=\"menu-item-container\">\n<div class=\"menu-item-name\">\n</div>\n<div class=\"menu-item\">\n<div class=\"slider-container\">\n<div class=\"slider selector\"></div>\n<div class=\"slider-value\">\n<span data-bind=\"text: filterDisplay()\"></span>\n</div>\n</div>\n</div>\n</div>", "tmpl-quickadd-item": "<div class='quickadd-container' data-bind=\"css: {expanded: expanded}\">\n<div class='quickadd-container-inner'>\n<div class='quickadd-item' data-bind=\"click:toggleExpand\">\n<div data-bind=\"attr: {class: imageClass} \"/>\n<div>\n<span class=\"bolded\">MAKE</span> <span data-bind=\"text:name\">\n</div>\n</div>\n<div class=\"expansion\" data-bind=\"style: {maxHeight: renderHeight() + 'px'}\">\n<div class=\"expansion-container\">\n<!-- ko template: { name: 'tmpl-quickadd-aes', data: metricView1 } -->\n<!-- /ko -->\n<!-- ko template: { name: 'tmpl-quickadd-aes', data: metricView2 } -->\n<!-- /ko -->\n<div class=\"success-indicator\" data-bind=\"css: {visible: successIndicatorVisible}\">\nChart created successfully!\n</div>\n</div>\n</div>\n</div>\n</div>", "tmpl-filters": "<h1 class=\"underlined\">Filters</h1>\n<div class=\"filter-list\" data-bind=\"template: {\nforeach: filters,\nname: 'tmpl-filter'\n}\">\n</div>\n<div id=\"new-filter\" class=\"menu-item-container\"\ndata-dnd-type=\"metric\"\ndata-bind=\"pui_dndContainer: {\nitementer:onMetricEnter,\ndropfilter:dropFilter,\ndatatype:'metric',\nname:'addfilter'},\ncss: {disabled: !enabled()}\">\n<div class=\"menu-item-name\">\n<div class=\"content\">Add Filter</div>\n</div>\n<div class=\"menu-item\">\n<!-- ko template: {name: 'tmpl-metric-droppable', data: {enabled: enabled()}} --><!-- /ko -->\n</div>\n</div>", "tmpl-sharepanel": "<div id=\"share\" data-bind=\"style: {right: panelRight() + 'px'}\">\n<h1>Share</h1>\n<div data-bind=\"click: sendToEmail\" class=\"btn-large\">\n<div class=\"content\">\nSend to Email\n</div>\n</div>\n<div data-bind=\"click: copyURL\" class=\"btn-large\">\nCopy URL to Clipboard\n</div>\n<div data-bind=\"click: copyImage\" class=\"btn-large\">\nCopy Image to Clipboard\n</div>\n<h1 class=\"spc_lt\">Export</h1>\n<div data-bind=\"click: exportPDF\" class=\"btn-large\">\nExport to PDF\n</div>\n<div data-bind=\"click: exportPNG\" class=\"btn-large\">\nExport to PNG\n</div>\n<div data-bind=\"click: exportSVG\" class=\"btn-large\">\nExport to SVG\n</div>\n<div data-bind=\"click: exportPPT\" class=\"btn-large\">\nExport to PowerPoint\n</div>\n</div>", "tmpl-comment-item": "<div class=\"item comment text\">\n<div class=\"comment-bg\">\n<div class=\"author\" data-bind=\"text: author\">\n</div>\n<div class=\"container\">\n<div class=\"content\" contenteditable=\"true\"\ndata-bind=\"pui_contentEditable: textContent,\nattr: {contenteditable: !isViewer()},\nenable: !isViewer()\">\n</div>\n</div>\n</div>\n</div>", "tmpl-text-item": "<div class=\"item text\">\n<div class=\"content\" contenteditable=\"true\"\ndata-bind=\"pui_contentEditable: textContent,\nattr: {contenteditable: !isViewer()},\nenable: !isViewer()\">\n</div>\n</div>", "tmpl-nux-layers-panel": "<h1>The Layers Panel</h1>\n<p>\nHere you can customize your chart to suit your needs.\n</p>", "tmpl-nux-finished": "<h1>Nicely Done!</h1>\n<p>\nYou've successfully created a chart to place on your dashboard. To return to your dashboard, you can click \"Return to Dashboard\" in the header.\n</p>\n<p>\nIf you'd like to visualize your own dataset, simply click \"Return Home\" and then connect your database. Happy charting!\n</p>\n<div class=\"btn-flat\" data-bind=\"click: nextStep\">Finish</div>", "tmpl-main-chart": "<div class=\"container\" data-bind='css: { hasheader: hasHeader }'>\n<!-- ko if: hasHeader -->\n<!-- ko template: {name: 'tmpl-header', data: headerView } --><!-- /ko -->\n<!-- /ko -->\n<!-- ko template: {name: 'tmpl-overlay-container', data: overlayView } --><!-- /ko -->\n<div class='graphbuilder-main'>\n<!-- ko template: {name: 'tmpl-data-panel', data:dataView} --><!-- /ko -->\n<div class=\"chartbuilder-container visible\">\n<!-- ko template: {name: 'tmpl-chartbuilder', data: chartbuilderView} --><!-- /ko -->\n</div>\n</div>\n<!-- ko template: {name: 'tmpl-sharepanel', data: shareView} --><!-- /ko -->\n</div>", "tmpl-quickadd": "<div class='menu-panel'>\n<h1>Charts</h1>\n<!-- ko template: {name: 'tmpl-quickadd-item', data: lineView} --><!-- /ko -->\n<!-- ko template: {name: 'tmpl-quickadd-item', data: barView} --><!-- /ko -->\n<!-- ko template: {name: 'tmpl-quickadd-item', data: pieView} --><!-- /ko -->\n<!-- ko template: {name: 'tmpl-quickadd-comment', data: commentView} --><!-- /ko -->\n<!-- ko template: {name: 'tmpl-custom-item'} --><!-- /ko -->\n</div>", "tmpl-workspace": "<div class='content-panel' data-bind=\"css: {viewer: isViewer}\">\n<div class='workspace-area'>\n<div class='workspace-panel'>\n<div class='workspace-items'>\n<!-- ko foreach: items -->\n<!-- ko template: { name: templateName, afterRender: init } --><!-- /ko -->\n<!-- /ko -->\n</div>\n</div>\n</div>\n</div>", "tmpl-chartbuilder": "<div class='menu-panel'>\n<div class=\"menu-container\">\n<h1>Layers</h1>\n<div class=\"layer-list\" data-bind=\"template: {\nforeach: layers,\nname: 'tmpl-layer'\n}\">\n</div>\n<div id=\"new-layer\" class=\"btn-large\" data-bind=\"click:addLayer\">\n<div class=\"content\">\n<img src=\"assets/icon_plus.png\" /><span class=\"bolded\">Add</span> New Layer\n</div>\n</div>\n<!-- ko template: {name: 'tmpl-filters', data: filtersView } --><!-- /ko -->\n</div>\n<!-- ko template: {name: 'tmpl-advanced-panel', data: advancedPanel } --><!-- /ko -->\n</div>\n<div class='content-panel'>\n<div class='chart-container'>\n<!-- ko template: {name: 'tmpl-chartbuilder-chart', afterRender: initChartDom } --><!-- /ko -->\n</div>\n</div>", "tmpl-metric-attached": "<div class=\"metric\" data-bind=\"click: toggleDropdown\">\n<div class=\"metric-icon\" data-bind=\"css: type\"></div>\n<div class=\"metric-name\" data-bind=\"text: visibleName\"></div>\n<div class=\"metric-option-arrow\"></div>\n</div>", "tmpl-metric-option-sort": "<div class=\"metric-option-item-title\">\nSort By:\n</div>\n<div class=\"metric-option-item-container\">\n<select data-bind=\"options: sortMetricList(), value: sortMetric\"></select>\n<a data-bind=\"text: asc, click: toggleAsc\"></a>\n</div>", "tmpl-metric-option-stats": "<div class=\"metric-option-item-title\">\nStats:\n</div>\n<div class=\"metric-option-item-container\">\n<select data-bind=\"options: statsList(), value: stats\"></select>\n</div>", "tmpl-dash": "<!-- ko template: {name: 'tmpl-quickadd', data:quickaddView} --><!-- /ko -->\n<!-- ko template: {name: 'tmpl-workspace', data:workspaceView, afterRender: workspaceView.init} --><!-- /ko -->", "tmpl-metric-dropdown": "<div class=\"metric\" data-bind=\"click: toggleDropdown\">\n<div class=\"metric-icon\" data-bind=\"css: type\"></div>\n<div class=\"metric-name\" data-bind=\"text: name\"></div>\n<div class=\"metric-option-arrow\"></div>\n</div>", "tmpl-custom-item": "<div class='quickadd-container'>\n<div class='quickadd-container-inner'>\n<div class='quickadd-item' data-bind=\"click:newCustomChart\">\n<span class=\"bolded\">Custom</span> Chart\n</div>\n</div>\n</div>", "tmpl-nux": "<div id=\"nux\" style=\"display: none\">\n<div class=\"covers\">\n<!-- ko foreach: covers -->\n<div class=\"cover\"\ndata-bind=\"style: {\ntop: top,\nleft: left,\nwidth: width,\nheight: height\n}\">\n</div>\n<!-- /ko -->\n</div>\n<div class=\"instructions\" data-bind=\"\nstyle: {\ntop: instrPos().top,\nleft: instrPos().left\n},\ncss: {\narrowRight: arrowDir() == 'right',\narrowNone: arrowDir() == 'none'\n}\">\n<!-- ko if: template() -->\n<div class=\"content\" data-bind=\"template: template()\"></div>\n<!-- /ko -->\n<!-- ko if: instructions().length -->\n<div class=\"bolded\">Try it Now:</div>\n<!-- ko foreach: instructions -->\n<div class=\"instr\" data-bind=\"css: {strike: $data.strike()}\">\n<span class=\"number\" data-bind=\"text: $data.i\"></span>\n<span class=\"content\" data-bind=\"text: $data.text\"></span>\n</div>\n<!-- /ko -->\n<!-- /ko -->\n</div>\n</div>", "tmpl-overlay-dropdown-dialog": "<div class=\"dropdown-dialog\">\n<div class=\"cover-top\"></div>\n<div data-bind=\"template: {\nname: templateName,\ndata: data,\n}\"></div>\n</div>", "tmpl-aesthetic": "<div class=\"menu-item-container\" data-dnd-type=\"metric\" data-bind=\"pui_dndContainer: {itementer:onEnter,itemdiscard:onDiscard,dropfilter:dropFilter,datatype:'metric',name:name,rerender:metric}, css: {disabled: !enabled()}\">\n<div class=\"menu-item-name\">\n<div class=\"content\" data-bind=\"text: name\"></div>\n</div>\n<div class=\"menu-item\">\n<!-- ko if: metric -->\n<div class=\"dropped-metric\" data-bind=\"template: {\ndata: metric,\nname: metricTemplate,\nafterRender: initMetricItem,\n}\">\n</div>\n<!-- /ko -->\n<!-- ko ifnot: metric -->\n<!-- ko template: {name: 'tmpl-metric-droppable', data: {enabled: enabled()}} --><!-- /ko -->\n<!-- /ko -->\n</div>\n</div>", "tmpl-dropdown-no-icon": "<div>\n<div class=\"name\">\n</div>\n<div class=\"metric-option-arrow\">\n</div>\n</div>"})}});
